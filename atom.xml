<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wkchen&#39;s blog</title>
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tipdev.xyz/"/>
  <updated>2018-07-04T05:47:52.193Z</updated>
  <id>http://www.tipdev.xyz/</id>
  
  <author>
    <name>wkchen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Let&#39;s develop golang via Vim-go</title>
    <link href="http://www.tipdev.xyz/2018/07/04/2018-07-04-Let&#39;s%20develop%20golang%20via%20Vim-go/"/>
    <id>http://www.tipdev.xyz/2018/07/04/2018-07-04-Let&#39;s develop golang via Vim-go/</id>
    <published>2018-07-03T16:00:00.000Z</published>
    <updated>2018-07-04T05:47:52.193Z</updated>
    
    <content type="html"><![CDATA[<p>最近有时间继续我的 golang 学习了， 之前使用 vscode 作为主要开发的 ide，最近在不同的机子上写一些代码片，vscode 就不再是我的第一选择了。取而代之的是 vim ，上手写 go 也是非常顺手。分享一下我是怎么搭建我的 go 开发工具的。</p>
<p>先看效果图：</p>
<p><img src="/images/vim/vim-go/show.gif" alt="show"></p>
<h3 id="安装-Vim-（我用的是-Vim8-1）"><a href="#安装-Vim-（我用的是-Vim8-1）" class="headerlink" title="安装 Vim （我用的是 Vim8.1）"></a>安装 Vim （我用的是 Vim8.1）</h3><p>   关于安装，其实 Linux、MacOS 下都预装了 vim</p>
<p>   关于配置，我以前写过一篇文章，传送门-&gt; <a href="http://blog.cz1y.com/2017/11/07/2017-11-07-Let&#39;s%20%E7%82%AB%E9%85%B7%E7%BB%88%E7%AB%AF/" target="_blank" rel="external">Let’s 炫酷终端</a></p>
<h3 id="安装-Vim-go"><a href="#安装-Vim-go" class="headerlink" title="安装 Vim-go"></a>安装 Vim-go</h3><p>   Step1. 这里我使用 Vundle 进行安装，在<code>~/.vimrc</code> 中修改一下内容：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># vim ~/.vimrc</div><div class="line"></div><div class="line">call vundle#begin()</div><div class="line">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class="line">&quot; 添加 vim-go</div><div class="line">Plugin &apos;fatih/vim-go&apos; </div><div class="line">call vundle#end()</div></pre></td></tr></table></figure>
<p>   Step2. w保存后，使用<code>:PluginInstall</code>进行安装，如果很慢当然了可以直接把 <a href="https://github.com/fatih/vim-go" target="_blank" rel="external">vim-go</a>  git仓库 clone 下来。</p>
<p>   关于 vim-go 的具体功能我就不多说了，<a href="https://github.com/fatih/vim-go" target="_blank" rel="external">vim-go</a> 的 README 里说的很明白，还推荐一个<a href="https://www.youtube.com/channel/UCaPX53JLxxSbwZz_Ra_cL0g" target="_blank" rel="external">DigitalOcean</a>的关于 vim-go 视频。</p>
<h3 id="安装-YouCompleteMe"><a href="#安装-YouCompleteMe" class="headerlink" title="安装 YouCompleteMe"></a>安装 YouCompleteMe</h3><p>   YouCompleteMe 的作用是自动补全代码，不仅支持 Golang，还支持 C、Python、Ruby 等等。Vim-go 下的代码提示需要CTRL-X + CTRL-O，虽然可以通过映射，但还是比较麻烦。</p>
<p>   Setp1. 同样适用 Vundle 安装 YouCompleteMe，在<code>~/.vimrc</code> 修改一下内容：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># vim ~/.vimrc</div><div class="line"></div><div class="line">call vundle#begin()</div><div class="line">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class="line">Plugin &apos;fatih/vim-go&apos; </div><div class="line">&quot; 添加 YouCompleteMe</div><div class="line">Plugin &apos;Valloric/YouCompleteMe&apos;</div><div class="line">call vundle#end()</div></pre></td></tr></table></figure>
<p>   Step2. w 保存后，使用 <code>:PluginInstall</code> 进行安装，如果很慢当然了可以直接把<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a> git 仓库 clone 下来。</p>
<p>   Step3. 然后进到 <code>.vim/bundle/YouCompleteMe</code> 执行一下安装：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">./install.py  --clang-completer --go-completer</div></pre></td></tr></table></figure>
<p>   如果提示 File /root/.vim/bundle/YouCompleteMe/third_party/ycmd/build.py does not exist; you probably forgot to run:git submodule update –init —recursive 执行组册子模块。</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git submodule update --init —recursive</div></pre></td></tr></table></figure>
<p>   当我创建并打开一个 go 文件时，YouCompleteMe unavailable:cannot import name _remove_dead_weakref 警告，导致不会自动补全。</p>
<p>   在 YouCompleteMe 的 <a href="https://github.com/Valloric/YouCompleteMe/issues/2883" target="_blank" rel="external">Issues</a> 中解决方法：</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew unintsall python@2</div></pre></td></tr></table></figure>
<p>   应该是安装了多个版本的 pyhton 导致的，使用以上命令后重复上面 <code>./install.py …</code> 步骤即可。</p>
<h3 id="函数跳转"><a href="#函数跳转" class="headerlink" title="函数跳转"></a>函数跳转</h3><p>   在翻看 Vim-go 的 Issues 的时候，看到关于 <a href="https://github.com/fatih/vim-go/issues/667" target="_blank" rel="external">Add support for Vim tag stack to GoDef?</a> 的讨论，使用 CREL-] 进入函数，使用 CTRL-T 跳出函数，第一次使用的时候会提示你缺少相应的 binary，根据提示使用 <code>:GoInstallBinaries</code> 进行安装即可。</p>
<p>   ​</p>
<p>   ​</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有时间继续我的 golang 学习了， 之前使用 vscode 作为主要开发的 ide，最近在不同的机子上写一些代码片，vscode 就不再是我的第一选择了。取而代之的是 vim ，上手写 go 也是非常顺手。分享一下我是怎么搭建我的 go 开发工具的。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Native 热更新 CodePush</title>
    <link href="http://www.tipdev.xyz/2018/05/08/2018-05-08-React%20Native%20%E7%83%AD%E6%9B%B4%E6%96%B0%20CodePush/"/>
    <id>http://www.tipdev.xyz/2018/05/08/2018-05-08-React Native 热更新 CodePush/</id>
    <published>2018-05-07T16:00:00.000Z</published>
    <updated>2018-05-08T02:20:54.789Z</updated>
    
    <content type="html"><![CDATA[<p>去年跨平台应用开发非常热门比如React Native、Weex等等，这些框架一般都采用 JavaScript 和原生 Native混合开发，今年热度有所下降，似乎在技术瓶颈还上存在一定的缺陷。抱着试一试的心态，开发了个小应用，简单分享一下RN下热更新的使用。</p>
<p>环境：</p>
<blockquote>
<p>CodePush 2.1.8</p>
<p>Node 8.9.0</p>
<p>React Native 0.55.3</p>
</blockquote>
<h3 id="初始化-RN-项目"><a href="#初始化-RN-项目" class="headerlink" title="初始化 RN 项目"></a>初始化 RN 项目</h3><p>从头开始捋一遍，先创建项目（React Native 的环境搭建就不多说了，可以直接看官网教程）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 初始化项目</div><div class="line">react-native init codepushdemo</div></pre></td></tr></table></figure>
<h3 id="安装配置CodePush"><a href="#安装配置CodePush" class="headerlink" title="安装配置CodePush"></a>安装配置CodePush</h3><p>CodePush 是一个用来提供 React Native 代码部署和客户端同步的服务，可以看作是 Git仓库，客户端启动后查看是否有代码更新，有就pull 下来。</p>
<p>Step1. 安装CodePush CLI</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install -g code-push-cli</div></pre></td></tr></table></figure>
<p>Step2. 注册账号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">code-push register</div></pre></td></tr></table></figure>
<p>这个时候会启动浏览器，使用 Github 账号登录后会生成一个密钥Key，粘贴到终端中。</p>
<p>Step3. 创建应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">code-push app add codepushdemo ios react-native</div></pre></td></tr></table></figure>
<p>会生成Production和Staging两个开发密钥，Production用于正式环境，Staging用于测试环境。<img src="/images/rn_codepush/deployment_key.png" alt="deployment key"></p>
<h3 id="集成CodePush-SDK-iOS"><a href="#集成CodePush-SDK-iOS" class="headerlink" title="集成CodePush SDK iOS"></a>集成CodePush SDK iOS</h3><p>CodePush 提供了几种集成的方式，这里演示RNPM如何在iOS项目中集成CodePush。</p>
<p>Step1. 安装react-native-code-push 插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install --save react-native-code-push</div></pre></td></tr></table></figure>
<p>Step2. 配置 deployment key 和自动化配置sdk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">react-native link react-native-code-push</div></pre></td></tr></table></figure>
<p>这里需要输入 deployment key，如果忘记了可以使用 <code>code-push deployment ls codepushdemo -k</code>查看。</p>
<p>其他的集成方式参考<a href="https://github.com/Microsoft/react-native-code-push/blob/master/docs/setup-ios.md" target="_blank" rel="external">官方文档</a>。</p>
<h3 id="发布更新"><a href="#发布更新" class="headerlink" title="发布更新"></a>发布更新</h3><p>Step1. 使用CodePush </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 1.导入CodePush 模块</div><div class="line">import codePush from &apos;react-native-code-push&apos;</div><div class="line">// 2.请求更新，在 componentDidMount 中调用 sync </div><div class="line">codePush.sync()</div></pre></td></tr></table></figure>
<p>Step2. 发布更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// --t 版本号，--dev 是否开启开发者模式，--d 发布更新环境，--des 更新说明，-m 是否强制更新</div><div class="line">code-push release-react codepushdemo ios --t 1.0.0</div></pre></td></tr></table></figure>
<p>注意：这里版本号需要和安装时的版本号相同，比如安装时的版本为1.0.0，发布更新时修改成1.0.1 ，这样是无法更新的，只能是1.0.0。</p>
<p>Step3. 客户端更新</p>
<p>此时打开App就能收到更新，不过要等到下一次启动才会生效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年跨平台应用开发非常热门比如React Native、Weex等等，这些框架一般都采用 JavaScript 和原生 Native混合开发，今年热度有所下降，似乎在技术瓶颈还上存在一定的缺陷。抱着试一试的心态，开发了个小应用，简单分享一下RN下热更新的使用。&lt;/p&gt;
&lt;p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux 安全防范 日志篇</title>
    <link href="http://www.tipdev.xyz/2018/04/19/2018-04-19-Linux%20%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83%20%E6%97%A5%E5%BF%97%E7%AF%87/"/>
    <id>http://www.tipdev.xyz/2018/04/19/2018-04-19-Linux 安全防范 日志篇/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2018-04-19T05:48:22.948Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇学习了如何防范 SSH 暴力破解，虽然增加了一定的破解难度，但是总是还会有黑客通过各种方法侵入服务器。Linux 自带的日志管理系统能够有效的帮助到我们，当客户端连接到服务器后的一举一动都将被记录在日志文件中，尽管一些”聪明“的黑客会设法去修改这些日志，但通过日志还是能让我们找到蛛丝马迹（就像罪犯在作案的过程中总会留下一些细微的证据，刑侦专家就能利用这些细节破案）。</p>
<h3 id="登录日志"><a href="#登录日志" class="headerlink" title="登录日志"></a>登录日志</h3><p>用户登录服务器时会与多个线程关联，系统会自动把对应的日志写入到 <code>/var/run/utmp</code>和 <code>/var/log/wtmp</code> 中。utmp 记录着当前登录成功的用户信息，wtmp 记录着每个成功登录的用户信息（登录时间、注销时间、登录时长等）。utmp 和 wtmp 都是二进制文件，不能直接使用cat 或 vim 查看，可以使用 <code>utmpdump [选项] [文件名]</code> 来查看 。</p>
<p>查看当前登录用户信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">utmpdump /var/run/utmp</div></pre></td></tr></table></figure>
<p>或者直接使用 <code>who</code> 命令</p>
<p>查看历史用户登录信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">utmpdump /var/log/wtmp</div></pre></td></tr></table></figure>
<p>或者直接使用 <code>last</code> 命令</p>
<p><img src="/images/linux_log/who-last.png" alt="who-last"></p>
<h3 id="进程记录"><a href="#进程记录" class="headerlink" title="进程记录"></a>进程记录</h3><p>进程记录是对进程活动的记录，由系统内核完成操作。当一个进程终止时，系统就自己记录该进程。这里使用 psacct 工具来监控系统用户活动情况，可以非常快速的追踪到用户使用了那些命令，什么时候登录，什么时候退出，还可以获取系统服务的资源使用情况。</p>
<p>安装 Psacct 工具</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo yum install psacct</div></pre></td></tr></table></figure>
<p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// centos 7 以下使用 service psacct start</div><div class="line">systemctl start psacct</div></pre></td></tr></table></figure>
<p>创建并开启日志文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">touch /var/log/pacct</div><div class="line">// 开启进程记录</div><div class="line">accton /var/log/pacct</div></pre></td></tr></table></figure>
<p>如何查看？ 有以下几种方式：</p>
<p>1、dump-acct 命令：读取进程记录，用法和 utmpdump 相同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dump-acct /var/log/pacct</div></pre></td></tr></table></figure>
<p>2、sa 命令：可以会的每个用户或每个命令进程的使用情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// [user] 表示你要查看那个用户的记录</div><div class="line">sa -u | grep [user]</div></pre></td></tr></table></figure>
<p>3、lastcomm 命令：提供每个命令的输出结果，同时打印出每个命令的执行时间戳等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">lastcomm [user]</div></pre></td></tr></table></figure>
<p><img src="/images/linux_log/sa-lastcomm.png" alt="sa-lastcomm"></p>
<h3 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h3><p>在 Linux 下使用各种日志记录活动，为系统的安全状态提供了记录，一般这些日志存放在 <code>/var/log</code> 或 <code>/var/run</code> 中。在大部分 Linux 发行版中都默认使用 rsyslog 进行日志管理，在老版本中使用 syslog 。</p>
<p>检查 rsyslog 进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ps -aux | grep rsyslog</div></pre></td></tr></table></figure>
<p>如果已经安装并且已启动，省略一下步骤。</p>
<p>安装 rsyslog，一般情况下系统默认自带</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo yum install rsyslog</div></pre></td></tr></table></figure>
<p>启动 rsyslog</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 比如 centos6 以前的版本，默认自带 syslog 需要先停止</div><div class="line">service syslog stop</div><div class="line">// centos 7 使用 systemctl，之前使用 service </div><div class="line">systemctl start rsyslog</div></pre></td></tr></table></figure>
<p>rsyslog 能做的不仅仅是管理本地日志，在集群服务器中可以用来发送日志到日志服务器上，比如：有三台服务器，华北服务器A、华东服务器B、日志服务器C，服务器A 和 服务器B 把日志发送到 日志服务器C 上，那么管理员就能方便的去查看每台服务器做了什么。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇学习了如何防范 SSH 暴力破解，虽然增加了一定的破解难度，但是总是还会有黑客通过各种方法侵入服务器。Linux 自带的日志管理系统能够有效的帮助到我们，当客户端连接到服务器后的一举一动都将被记录在日志文件中，尽管一些”聪明“的黑客会设法去修改这些日志，但通过日志还是
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux 安全防范 SSH篇</title>
    <link href="http://www.tipdev.xyz/2018/04/17/2018-04-17-Linux%20%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83%20SSH%E7%AF%87/"/>
    <id>http://www.tipdev.xyz/2018/04/17/2018-04-17-Linux 安全防范 SSH篇/</id>
    <published>2018-04-16T16:00:00.000Z</published>
    <updated>2018-04-19T05:27:31.230Z</updated>
    
    <content type="html"><![CDATA[<p>在日常服务器的管理中，安全隐患始终困扰着我们，例如：DDos攻击、ARP攻击等。如果你忽视了这些，那么你的重要信息就很容易被黑客拿到，夸张点来说小白用户都能攻破你的服务器。接下来分享下我关于SSH 安全防范的学习心得。</p>
<p>SSH 是一种非对称加密的网络传输协议，方便于客户端与服务端的连接，通常用来远程执行服务端的命令。虽然它方便了我们与服务端的连接，但是存在不少隐患，一旦这一道安全锁被打开，就相当于把所有的信息公之于众。防范措施常见的有关闭 root 用户登录（避免超级权限滥用）、使用 RSA 密钥登录、IP 限制等。</p>
<h3 id="限制-ROOT-用户登录"><a href="#限制-ROOT-用户登录" class="headerlink" title="限制 ROOT 用户登录"></a>限制 ROOT 用户登录</h3><p>为什么建议关闭 root 用户登录 ssh？</p>
<ol>
<li><p>被攻破的情况下尽可能得避免最大的损失，假设服务器被暴力破解了成功的用 root 登录了上去，此时它已经拿到了你的 root 密码，并且拥有超级权限，想怎么做就怎么做。</p>
</li>
<li><p>限制权限，在团队开发中，时长需要多人操作服务器，如果你把 root 账号告诉所有人是一种不负责任的表现，那些删数据库、删服务器跑路就这样来的吧。（ps：遇到过 rm -rf / 删服务器的，当然他不是故意的2333）</p>
</li>
<li><p>避免误操作，有些时候真的是自己的误操作，导致数据的丢失或服务器的异常。非 root 用执行一些重要的命令时需要使用 sudo 来获取权限，并且会提示输入密码，以防误操。</p>
</li>
</ol>
<p>修改 ssh 配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<p>修改以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 禁用 root 用户登录</div><div class="line">PermitRootLogin yes</div></pre></td></tr></table></figure>
<p>重启服务应用配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// centos 7，7 以下 service sshd restart</div><div class="line">systemctl restart sshd</div></pre></td></tr></table></figure>
<h3 id="SSH-RSA-密钥"><a href="#SSH-RSA-密钥" class="headerlink" title="SSH RSA 密钥"></a>SSH RSA 密钥</h3><p>在关闭 root 用户登录限制的同时，还可以配合 RSA 密钥，进一步增加破解的难度。RSA 密钥采用公钥和私钥验证的方式限制非法登录，在客户端生成公钥和私钥，在服务端增加生成的公钥，当 ssh 登录时，只有拥有与之匹配的私钥才能登录成功，其余一律拦截。</p>
<p>Step1. 修改 ssh 配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<p>修改以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 开启 RSA 验证</div><div class="line">RSAAuthentication yes</div><div class="line">// 开启公钥验证</div><div class="line">PubkeyAuthentication yes</div><div class="line">// 设置公钥文件路径</div><div class="line">AuthorizedKeysFile  .ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>Step2. 在客户端生成 RSA 密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
<p>一路回车，使用过git 的应该对这句命令不会陌生吧。</p>
<p>Step3. 复制公钥到服务器 .ssh/authorized_keys</p>
<p>在服务器登录用户主目录下，创建 .ssh/authorized_keys 文件，并把客户端id_rsa.pub 内容复制到authorized_keys 中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /home/[user]/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>Step4. 重启服务应用配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// centos 7，7 以下 service sshd restart</div><div class="line">systemctl restart sshd</div></pre></td></tr></table></figure>
<p>当我完成以上配置后，ssh 到服务器时，发现依然需要密码登录，并且发现 we did not send a packet, disable method 错误。</p>
<p>打开debug 调试，指定 2222 端口看看具体错误是什么？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 服务端</div><div class="line">sudo /usr/sbin/sshd -p 2222 -d</div><div class="line">// 客户端</div><div class="line">ssh test@xxx.cz1y.com -vv -p 2222</div></pre></td></tr></table></figure>
<p>发现 debug1: Could not open authorized keys ‘/home/test/.ssh/authorized_keys’: Permission denied 权限不足问题。</p>
<p>现在知道可原因：<img src="/images/linux_ssh/ll-a.png" alt="查看权限">我这里使用 root 用户在 /home/[user] 目录下手动创建了 .ssh 和authorized_keys 文件，导致拥有者和拥有组都是 root。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 把 .ssh 文件夹和 authorized_keys 文件修改成 [user]</div><div class="line">chown [user]:[user] .ssh .ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>这里的 .ssh 文件夹和 authorized_keys 文件的拥有者和拥有组必须是对应的当前用户。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常服务器的管理中，安全隐患始终困扰着我们，例如：DDos攻击、ARP攻击等。如果你忽视了这些，那么你的重要信息就很容易被黑客拿到，夸张点来说小白用户都能攻破你的服务器。接下来分享下我关于SSH 安全防范的学习心得。&lt;/p&gt;
&lt;p&gt;SSH 是一种非对称加密的网络传输协议，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 源码分析 View 事件分发机制</title>
    <link href="http://www.tipdev.xyz/2018/03/26/2018-03-26-Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90View%20%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.tipdev.xyz/2018/03/26/2018-03-26-Android源码分析View 事件分发机制/</id>
    <published>2018-03-25T16:00:00.000Z</published>
    <updated>2018-03-26T08:12:15.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件分发过程"><a href="#事件分发过程" class="headerlink" title="事件分发过程"></a>事件分发过程</h3><p>一个事件的分发需要以下三个方法共同完成：</p>
<ol>
<li>事件分发：dispatchTouchEvent(MotionEvent ev) </li>
<li>事件拦截：onInterceptTouchEvent(MotionEvent ev) </li>
<li>事件处理：onTouchEvent(MotionEvent ev) </li>
</ol>
<p>分发过程概括：</p>
<p>点击事件产生后，首先传递给 ViewGroup 的 <code>dispatchTouchEvent()</code> 方法，在该方法内调用 <code>onInterceptTouchEvent()</code> 判断是否拦截事件，返回true 表示拦截事件，执行 ViewGroup 的 <code>onTouchEvent()</code> 方法；反之表示不拦截，传递给子 View 的 <code>dispatchTouchEvent()</code>方法，反复操作。</p>
<p><strong>需要注意：</strong></p>
<p>当一个 View 设置了 <code>onTouchListener()</code> 那么它的 <code>onTouch()</code> 事件将被触发，而该 View 的 <code>onTouchEvent()</code> 不会被调用。可以得出 <code>onTouchListener</code> 优先级高于 <code>onTouchEvent</code>。</p>
<p>当一个点击事件产生后，在传递的过程中如果 View 的 <code>onTouchEvent</code> 返回 false，那么它的父 View 的 <code>onTouchEvent</code> 将被调用，以此类推，如果所有 View 都不处理事件，那么最终事件将被反向传递到 Activity 的 <code>onTouchEvent</code></p>
<h3 id="Activity-对点击事件的分发机制"><a href="#Activity-对点击事件的分发机制" class="headerlink" title="Activity 对点击事件的分发机制"></a>Activity 对点击事件的分发机制</h3><p>点击事件产生后，最先传递到 Activity 中，由 <code>dispatchTouchEvent</code> 处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">      onUserInteraction();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 分析1. 获取 window，并调用 window 的 dispatchTouchEvent 方法</span></div><div class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">      <span class="comment">// 如果 superDispatchTouchEvent 返回 true ，表示事件被 window 中消费了</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> onTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析1:</p>
<p>Activity 首先把事件交给 Window，调用其 <code>superDispatchTouchEvent</code>方法传递事件，如果返回 true，那么直接可以结束整个事件的循环，如果返回 false 表示，事件没有被消费。</p>
<p>这里Window 的唯一实现时 PhoneWindow，接下来看一下 PhoneWindow 中做了什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> DecorView mDecor;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    <span class="comment">// 分析2 调用 DecorView 的 dispatchTouchEvent 方法</span></div><div class="line">    <span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析2:</p>
<p>看到 PhoneWindow 中 <code>superDispatchTouchEvent</code> 又把事件传递给了 mDecor，mDecor 是一个 DecorView。</p>
<p>那就再进到 DecorView 中看一下做了什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Window.Callback cb = mWindow.getCallback();</div><div class="line">    <span class="keyword">return</span> cb != <span class="keyword">null</span> &amp;&amp; !mWindow.isDestroyed() &amp;&amp; mFeatureId &lt; <span class="number">0</span></div><div class="line">    ? cb.dispatchTouchEvent(ev) : <span class="keyword">super</span>.dispatchTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 DecorView 中看到了有一行 <strong><code>super.dispatchTouchEvent(ev)</code></strong> ，仔细观察你会发现 DecorView 继承自 FrameLayout，而FrameLayout 继承自 ViewGroup ，<strong><code>super.dispatchTouchEvent(ev)</code></strong>是调用父类 ViewGroup 的 <code>dispatchTouchEvent()</code>，看到这里我们大致能读懂 Activity 中事件是真么传递的了。</p>
<h3 id="顶级-View-对点击事件的分发机制"><a href="#顶级-View-对点击事件的分发机制" class="headerlink" title="顶级 View 对点击事件的分发机制"></a>顶级 View 对点击事件的分发机制</h3><p>当点击事件到达顶级 View（一般是 ViewGroup ）后会调用 ViewGroup 的 <code>dispatchTouchEvent</code>，这里就比较复杂了，与前面讲到相同的是：如果 ViewGroup 拦截了事件即 <code>onInterceptToucheEvent</code> 返回 true，则事件有 ViewGroup 处理，这时如果 ViewGroup 设置了 <code>onTouchListener</code> 则调用其 <code>onTouch</code> 方法，反之调用 ViewGroup 的 <code>onTouchEvent</code> 方法；如果 ViewGroup 不拦截，就会把事件分发给子 View，反复循环。</p>
<p>从源码中我们能清晰的看出来以上结论：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 分析3 判断是否拦截事件</span></div><div class="line">    <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">        || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</div><div class="line">      <span class="keyword">if</span> (!disallowIntercept) &#123;</div><div class="line">        intercepted = onInterceptTouchEvent(ev);</div><div class="line">        ev.setAction(action); </div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        intercepted = <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      intercepted = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析3:</p>
<p>可以看到判断是否拦截事件有两个判断条件，<strong>MotionEvent.ACTION_DOWN</strong> 和 <strong>mFirstTouchTarget</strong>，前者表示事件，那么 mFirstTouchTarget 是什么东西呢？默认 mFirstTouchTarget 肯定是为null 的。这里需要配合接下来的源码分析。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">final</span> View[] children = mChildren;</div><div class="line"><span class="comment">// 分析4</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(</div><div class="line">      childrenCount, i, customOrder);</div><div class="line">    <span class="keyword">final</span> View child = getAndVerifyPreorderedView(</div><div class="line">      preorderedList, children, childIndex);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (childWithAccessibilityFocus != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (childWithAccessibilityFocus != child) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      childWithAccessibilityFocus = <span class="keyword">null</span>;</div><div class="line">      i = childrenCount - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</div><div class="line">        || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</div><div class="line">      ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    newTouchTarget = getTouchTarget(child);</div><div class="line">    <span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</div><div class="line">      newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    resetCancelNextUpFlag(child);</div><div class="line">    <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</div><div class="line">      mLastTouchDownTime = ev.getDownTime();</div><div class="line">      <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childrenCount; j++) &#123;</div><div class="line">          <span class="keyword">if</span> (children[childIndex] == mChildren[j]) &#123;</div><div class="line">            mLastTouchDownIndex = j;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mLastTouchDownIndex = childIndex;</div><div class="line">      &#125;</div><div class="line">      mLastTouchDownX = ev.getX();</div><div class="line">      mLastTouchDownY = ev.getY();</div><div class="line">      <span class="comment">// 分析5 addTouchTarget()</span></div><div class="line">      newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">      alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) preorderedList.clear();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析4:</p>
<p>在 dispatchTouchEvent 中有这样一段代码，它循环遍历 ViewGroup 的所有子元素，<strong><code>if (childWithAccessibilityFocus != null)</code></strong>判断是否能接收点击事件，不能接受直接跳过，能接受则继续。再往下看 <strong><code>if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign))</code></strong> ，查看源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchTransformedTouchEvent</span><span class="params">(MotionEvent event, <span class="keyword">boolean</span> cancel,</span></span></div><div class="line"><span class="function"><span class="params">            View child, <span class="keyword">int</span> desiredPointerIdBits)</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">final</span> <span class="keyword">int</span> oldAction = event.getAction();</div><div class="line">  <span class="keyword">if</span> (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;event.setAction(MotionEvent.ACTION_CANCEL);</div><div class="line">      <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">          handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          handled = child.dispatchTouchEvent(event);</div><div class="line">      &#125;</div><div class="line">  event.setAction(oldAction);</div><div class="line">  <span class="keyword">return</span> handled;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上，<code>dispatchTransformedTouchEvent</code> 中调用的是 child 的 <code>dispatchTouchEvent</code>，看到就能明白 ViewGroup 中事件分发传递的过程了。</p>
<p>接着看 ViewGroup <code>dispatchTouchEvent()</code> 中的 <code>addTouchTarget()</code>  源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> TouchTarget <span class="title">addTouchTarget</span><span class="params">(@NonNull View child, <span class="keyword">int</span> pointerIdBits)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> TouchTarget target = TouchTarget.obtain(child, pointerIdBits);</div><div class="line">    target.next = mFirstTouchTarget;</div><div class="line">    <span class="comment">// 分析6 把子View target 赋给 mFirstTouchTarget</span></div><div class="line">    mFirstTouchTarget = target;</div><div class="line">    <span class="keyword">return</span> target;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析5:</p>
<p><strong><code>mFirstTouchTarget = target;</code></strong> 这里把子 View 的 target 赋给 mFirstTouchTarget。恍然大悟，在分析3中，其中一个条件就是 mFirstTouchTarget ，当它不为空并且事件不为 ACTION_DOWN 的时候 ViewGroup 的拦截条件就不成立。</p>
<p><strong> 需要注意: </strong> </p>
<p>当设置了 FLAG_DISALLOW_INTERCEPT 标记位，这个标记位是通过 <code>requestDisallowInterceptTouchEvent</code> 方法设置，一般位于子 View 中。FLAG_DISALLOW_INTERCEPT 设置后， ViewGroup 将无法拦截除了 ACTION_DOWN 以外的点击事件。ACTION_DOWN 事件在 ViewGroup 的<code>dispatchTouchEvent</code> 一开始被重置，导致 FLAG_DISALLOW_INTERCEPT 标记位无效。</p>
<h3 id="View-对点击事件的处理"><a href="#View-对点击事件的处理" class="headerlink" title="View 对点击事件的处理"></a>View 对点击事件的处理</h3><p>不废话，直接看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">      <span class="keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</div><div class="line">        result = <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      ListenerInfo li = mListenerInfo;</div><div class="line">      <span class="comment">// 分析7</span></div><div class="line">      <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">          &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">          &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">        result = <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">        result = <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析6:</p>
<p>其中 <strong><code>li.mOnTouchListener != null</code></strong>就是用来判断，当前View 是否设置了 <code>onTouchListener</code>，也验证了之前讲到的设置了 <code>onTouchListener</code> 就不会执行 <code>onTouchEvent</code> 。</p>
<p>如果没有设置 <code>onTouchListener</code> ，<code>onTouchEvent</code> 将被调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    ... </div><div class="line">    <span class="comment">// 分析8</span></div><div class="line">    <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">      <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">        setPressed(<span class="keyword">false</span>);</div><div class="line">      &#125;</div><div class="line">      mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</div><div class="line">      <span class="comment">// A disabled view that is clickable still consumes the touch</span></div><div class="line">      <span class="comment">// events, it just doesn't respond to them.</span></div><div class="line">      <span class="keyword">return</span> clickable;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当 View 为不可用状态时，依然会消费点击事件。</p>
<p>相关资料：</p>
<ul>
<li><a href="https://source.android.com/setup/downloading" target="_blank" rel="external">Android 8.0 源码</a></li>
<li><a href="">Android 开发艺术探索</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件分发过程&quot;&gt;&lt;a href=&quot;#事件分发过程&quot; class=&quot;headerlink&quot; title=&quot;事件分发过程&quot;&gt;&lt;/a&gt;事件分发过程&lt;/h3&gt;&lt;p&gt;一个事件的分发需要以下三个方法共同完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件分发：dispatchTouchEv
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 密钥安全之 密钥库的使用</title>
    <link href="http://www.tipdev.xyz/2018/02/27/2018-02-27-Android%20%E5%AF%86%E9%92%A5%E5%AE%89%E5%85%A8%E4%B9%8B%20%E5%AF%86%E9%92%A5%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.tipdev.xyz/2018/02/27/2018-02-27-Android 密钥安全之 密钥库的使用/</id>
    <published>2018-02-26T16:00:00.000Z</published>
    <updated>2018-02-27T13:51:49.902Z</updated>
    
    <content type="html"><![CDATA[<p>相信大家在日常开发中会经常碰到一些重要信息如何存储的问题，比如 token，也看到过很多 app 简单粗暴地将这些存储在本地持久化中 ，更有直接暴露在代码中的，即使开启了 proguard 混淆，也会被轻而易举的破解。我曾经也写过这样的代码，也吃过亏，经过这段时间的学习，分享下我的存储策略。</p>
<p>我们可以利用原生 Android 的 Cipher 和 KeyStore 来进行数据的加密和解密。</p>
<ol>
<li><p>Cipher 提供了 AES 和 RSA 两种加密方式</p>
</li>
<li><p>KeyStore 可以生成 private key 和 public key</p>
</li>
</ol>
<p>思路：使用 KeyStore 生成的 public key 和 数据 进行 RSA 加密，然后你就可以任意处置加密后的数据了，你想要放在 SharePreferences 或者 数据库中，anyway 都可以。当你想要使用到它的时候就可以从 SharePreferences 中取出加密后的数据，使用 KeyStore 的 private key 进行 RSA 解密，整个过程如德芙般丝滑顺畅。</p>
<h4 id="Cipher-的用法"><a href="#Cipher-的用法" class="headerlink" title="Cipher 的用法"></a>Cipher 的用法</h4><p>原生 Android 提供了 <a href="https://developer.android.com/reference/javax/crypto/Cipher.html" target="_blank" rel="external">Cipher</a> 这个类，从字面上可以理解为 密码的意思，这个类用于数据的加密和解密。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Chipher chipher = Chipher.getInstance(<span class="string">"算法"</span>);</div><div class="line">cipher.init(Cipher.ENCRYPT_MODE, key)  <span class="comment">// 初始化</span></div></pre></td></tr></table></figure>
<h4 id="KeyStore-的用法"><a href="#KeyStore-的用法" class="headerlink" title="KeyStore 的用法"></a>KeyStore 的用法</h4><p><a href="https://developer.android.com/training/articles/keystore.html" target="_blank" rel="external">KeyStore</a> 可以保护密钥免遭未经授权的使用，一旦生成或导入密钥，就无法进行更改，并且只允许应用自身访问，非常适合存储加密密钥。</p>
<p>Step1. 创建 KeyStore</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">keyStore = KeyStore.getInstance(KEYSTORE_PROVIDER);</div></pre></td></tr></table></figure>
<p>Step2. 随机生成一个新密钥，并存入 KeyStore</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">KeyPairGenerator keyPairGenerator = KeyPairGenerator</div><div class="line">        .getInstance(KeyProperties.KEY_ALGORITHM_RSA, KEYSTORE_PROVIDER);</div><div class="line"></div><div class="line">KeyGenParameterSpec keyGenParameterSpec = <span class="keyword">new</span> KeyGenParameterSpec</div><div class="line">        .Builder(KEYSTORE_ALIAS, KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)</div><div class="line">        .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)</div><div class="line">        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1)</div><div class="line">        .build();</div><div class="line"></div><div class="line">keyPairGenerator.initialize(keyGenParameterSpec);</div><div class="line">keyPairGenerator.generateKeyPair();</div></pre></td></tr></table></figure>
<p>注意：KeyPairGenerator 是 API 23 新增加的类，低于 API 23 的使用 KeyPairGeneratorSpec。</p>
<h4 id="结合-Chiper-和-KeyStore"><a href="#结合-Chiper-和-KeyStore" class="headerlink" title="结合 Chiper 和 KeyStore"></a>结合 Chiper 和 KeyStore</h4><p>我们借助 KeyStore 的随机密钥 和 安全存储 与 Chiper 加密算法 进行结合。至于 Chiper 的算法如何选择，AES/RAS 都可以，这里我只介绍 RSA 算法，至于其他用法差不多，详见官方文档，写的很清楚。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 通过 KeyStore 公钥 进行 RSA 加密</span></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">encryptRSA</span><span class="params">(String plaintText)</span><span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        PublicKey publicKey = keyStore.getCertificate(KEYSTORE_ALIAS).getPublicKey();</div><div class="line"></div><div class="line">        Cipher cipher = Cipher.getInstance(RSA_MODE);</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE,publicKey);</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] encryptedBytes = cipher.doFinal(plaintText.getBytes());</div><div class="line">        <span class="keyword">return</span> Base64.encodeToString(encryptedBytes, Base64.DEFAULT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 通过 KeyStore 私钥 进行 RSA 解密</span></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">decryptRSA</span><span class="params">(String plaintText)</span><span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		PrivateKey privateKey = (PrivateKey) keyStore.getKey(KEYSTORE_ALIAS, <span class="keyword">null</span>);</div><div class="line">        </div><div class="line">        Cipher cipher = Cipher.getInstance(RSA_MODE);</div><div class="line">        cipher.init(Cipher.DECRYPT_MODE,privateKey);</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] encryptedBytes = Base64.decode(plaintText, Base64.DEFAULT);</div><div class="line">        <span class="keyword">byte</span>[] decryptedBytes = cipher.doFinal(encryptedBytes);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(decryptedBytes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相关链接：</p>
<ul>
<li><a href="https://developer.android.com/training/articles/keystore.html" target="_blank" rel="external">Android 密钥库系统</a></li>
<li><a href="http://drakeet.me/android-security-guide/" target="_blank" rel="external">Android 密钥保护和 C/S 网络传输安全理论指南</a></li>
<li><a href="https://developer.android.com/reference/javax/crypto/Cipher.html" target="_blank" rel="external">Cipher</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信大家在日常开发中会经常碰到一些重要信息如何存储的问题，比如 token，也看到过很多 app 简单粗暴地将这些存储在本地持久化中 ，更有直接暴露在代码中的，即使开启了 proguard 混淆，也会被轻而易举的破解。我曾经也写过这样的代码，也吃过亏，经过这段时间的学习，分
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Golang 源码编译安装 1.9.3</title>
    <link href="http://www.tipdev.xyz/2018/02/06/2018-02-06-Golang%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%201.9.3/"/>
    <id>http://www.tipdev.xyz/2018/02/06/2018-02-06-Golang 源码编译安装 1.9.3/</id>
    <published>2018-02-05T16:00:00.000Z</published>
    <updated>2018-02-06T05:28:05.063Z</updated>
    
    <content type="html"><![CDATA[<p>今天在线上服务器搭建 Go 环境的时候，遇到了一些问题，编译 go1.9.3 的时候出现了 <code>$GOROOT_BOOTSTRAP to a working Go tree &gt;= Go 1.4</code>错误提示，于是写下这篇文章记录我的安装过程。</p>
<blockquote>
<p>环境 Centos 7 （Mac通用）</p>
</blockquote>
<h4 id="下载-go-源代码"><a href="#下载-go-源代码" class="headerlink" title="下载 go 源代码"></a>下载 go 源代码</h4><p>Step1. 安装 git ，当然你也可以直接去 GitHub 上下载源码包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum -y install git</div></pre></td></tr></table></figure>
<p> Step2. 下载源码到指定目录 （比如 /usr/local）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone https://github.com/golang/go.git</div></pre></td></tr></table></figure>
<h4 id="编译-go-源码"><a href="#编译-go-源码" class="headerlink" title="编译 go 源码"></a>编译 go 源码</h4><p>Setp1. 首先切换到 go/src 目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /usr/local/go/src</div></pre></td></tr></table></figure>
<p>Step2. 编译源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">./all.bash</div></pre></td></tr></table></figure>
<p>如果在这个时候遇到了 <code>$GOROOT_BOOTSTRAP to a working Go tree &gt;= Go 1.4</code>问题，请继续往下看。</p>
<h4 id="解决编译依赖"><a href="#解决编译依赖" class="headerlink" title="解决编译依赖"></a>解决编译依赖</h4><p>出现这种情况是因为 go1.9.3 依赖于 go1.4 ，那么无任何解决呢？</p>
<p>Step1. 下载 go 源码，切换到 1.4 分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /usr/local/go1.4</div><div class="line">git checkout go1.4</div></pre></td></tr></table></figure>
<p>Step2. 编译 go1.4 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /usr/local/go1.4/src</div><div class="line">./all.bash</div></pre></td></tr></table></figure>
<p>此时在同级目录下，会生成一个 bin 文件夹，这就是编译后的文件。</p>
<p>Step3. 编译 go1.9 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /usr/local/go/src</div><div class="line">./all.bash</div></pre></td></tr></table></figure>
<p>使用 <code>go --version</code>查看当前版本，如果找不到命令或者版本不对应，需要设置环境变量。</p>
<h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>修改 <code>.bashrc</code>或者<code>.bash_profile</code> 文件，如果你安装了 oh-my-zsh 那么修改 <code>.zshrc</code>即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># golang</div><div class="line">export GOPATH=/usr/local/go/bin</div></pre></td></tr></table></figure>
<p>保存设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure>
<p>这里说的环境变量，顺便提一下修改环境变量的几种方式以及区别：</p>
<ol>
<li>优先级 <code>/etc/profile</code> &gt; <code>.bash_profile</code> &gt; <code>.bashrc(.zshrc)</code></li>
<li><code>/etc/profile</code>系统级别，对系统下的所有用户有效</li>
<li><code>.bash_profile</code> 、<code>.bashrc</code>和<code>.zshrc</code>仅对当前登录用户有效</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在线上服务器搭建 Go 环境的时候，遇到了一些问题，编译 go1.9.3 的时候出现了 &lt;code&gt;$GOROOT_BOOTSTRAP to a working Go tree &amp;gt;= Go 1.4&lt;/code&gt;错误提示，于是写下这篇文章记录我的安装过程。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解决Mac 下 Terminal Shadowsocks 科学上网</title>
    <link href="http://www.tipdev.xyz/2018/02/01/2018-02-01-%E8%A7%A3%E5%86%B3Mac%20%E4%B8%8B%20Terminal%20%20Shadowsocks%20%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://www.tipdev.xyz/2018/02/01/2018-02-01-解决Mac 下 Terminal  Shadowsocks 科学上网/</id>
    <published>2018-01-31T16:00:00.000Z</published>
    <updated>2018-02-01T03:40:51.946Z</updated>
    
    <content type="html"><![CDATA[<p>最近在安装 vim-go 和 golang 依赖的过程中遇到了一些  “墙” 的问题。众所周知在 Terminal 中是不走Sock5 代理的，那么怎么才能在 Terminal 中科学上网呢？</p>
<p>首先你得有 Shadowsocks 账号，这里就不赘述了，网上教程很多。</p>
<h4 id="安装-polipo-工具"><a href="#安装-polipo-工具" class="headerlink" title="安装 polipo 工具"></a>安装 polipo 工具</h4><p>polipo 是一个简单的web代理工具，具体介绍👉 <a href="https://wiki.archlinux.org/index.php/Polipo_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="external">polipo</a>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install polipo</div></pre></td></tr></table></figure>
<h4 id="设置-Sock-代理"><a href="#设置-Sock-代理" class="headerlink" title="设置 Sock 代理"></a>设置 Sock 代理</h4><p>编辑 homebrew.mxcl.polipo.plist</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /usr/local/opt/polipo/homebrew.mxcl.polipo.plist</div></pre></td></tr></table></figure>
<p>修改如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class="line"> &lt;plist version=&quot;1.0&quot;&gt;</div><div class="line">   &lt;dict&gt;</div><div class="line">     &lt;key&gt;Label&lt;/key&gt;</div><div class="line">     &lt;string&gt;homebrew.mxcl.polipo&lt;/string&gt;</div><div class="line">     &lt;key&gt;RunAtLoad&lt;/key&gt;</div><div class="line">     &lt;true/&gt;</div><div class="line">     &lt;key&gt;KeepAlive&lt;/key&gt;</div><div class="line">     &lt;true/&gt;</div><div class="line">     &lt;key&gt;ProgramArguments&lt;/key&gt;</div><div class="line">     &lt;array&gt;</div><div class="line">       &lt;string&gt;/usr/local/opt/polipo/bin/polipo&lt;/string&gt;</div><div class="line">       &lt;string&gt;socksParentProxy=localhost:1080&lt;/string&gt;</div><div class="line">     &lt;/array&gt;</div><div class="line">     &lt;!-- Set `ulimit -n 65536`. The default macOS limit is 256, that&apos;s</div><div class="line">          not enough for Polipo (displays &apos;too many files open&apos; errors).</div><div class="line">          It seems like you have no reason to lower this limit</div><div class="line">          (and unlikely will want to raise it). --&gt;</div><div class="line">     &lt;key&gt;SoftResourceLimits&lt;/key&gt;</div><div class="line">     &lt;dict&gt;</div><div class="line">       &lt;key&gt;NumberOfFiles&lt;/key&gt;</div><div class="line">       &lt;integer&gt;65536&lt;/integer&gt;</div><div class="line">     &lt;/dict&gt;</div><div class="line">   &lt;/dict&gt;</div><div class="line"> &lt;/plist&gt;</div></pre></td></tr></table></figure>
<h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><p>开启 polipo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln -sfv /usr/local/opt/polipo/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist</div></pre></td></tr></table></figure>
<p>关闭 polipo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist</div></pre></td></tr></table></figure>
<h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><p>在 ~/.bash_profile 或者 ~/.bashrc 添加一下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">alias proxy=&quot;export http_proxy=http://localhost:8123;export https_proxy=http://localhost:8123&quot;  # 开启</div><div class="line">alias unproxy=&quot;unset http_proxy&quot;  # 关闭</div></pre></td></tr></table></figure>
<p>如果你和我一样安装了 oh-my-zsh 请在 ~/.zshrc 中添加以上代码。</p>
<p>保存配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">source 环境变量配置文件  # 比如 source .zshrc</div></pre></td></tr></table></figure>
<h4 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h4><p>在终端中 执行 proxy 开启代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">proxy</div></pre></td></tr></table></figure>
<p>使用 curl 进行测试 curl cip.cc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">IP	: 35.194.198.57</div><div class="line">地址	: 美国  艾奥瓦州  Cloud</div><div class="line"></div><div class="line">数据二	: 美国 | Merit网络公司</div><div class="line"></div><div class="line">URL	: http://www.cip.cc/35.194.198.57</div></pre></td></tr></table></figure>
<p>执行 unproxy 关闭代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">unproxy</div></pre></td></tr></table></figure>
<p>使用 curl 进行测试 curl cip.cc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">IP	: 125.121.15.42</div><div class="line">地址	: 中国  浙江  杭州</div><div class="line"></div><div class="line">数据二	: 浙江省杭州市 | 电信</div><div class="line"></div><div class="line">URL	: http://www.cip.cc/125.121.15.42</div></pre></td></tr></table></figure>
<p>这样就可以在 Terminal 中愉快的科学上网了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在安装 vim-go 和 golang 依赖的过程中遇到了一些  “墙” 的问题。众所周知在 Terminal 中是不走Sock5 代理的，那么怎么才能在 Terminal 中科学上网呢？&lt;/p&gt;
&lt;p&gt;首先你得有 Shadowsocks 账号，这里就不赘述了，网上教程
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Native层静态数据安全加密</title>
    <link href="http://www.tipdev.xyz/2018/02/01/2018-02-01-Android%20Native%E5%B1%82%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%8A%A0%E5%AF%86/"/>
    <id>http://www.tipdev.xyz/2018/02/01/2018-02-01-Android Native层静态数据安全加密/</id>
    <published>2018-01-31T16:00:00.000Z</published>
    <updated>2018-02-01T03:39:02.968Z</updated>
    
    <content type="html"><![CDATA[<p>整体思路：so 文件在加载时会自动加载 JNI_OnLoad() ，在该方法中对应用签名进行比较，如果签名验证失败，直接在 JNI_OnLoad() 中返回失败。如果验证通过就可以通过 JNI 调用方法获取相应的值。这样可畏是既解决了通常的数据外泄，又解决了 so 文件被提取二次打包造成的重要数据外泄。</p>
<h4 id="加载-so-文件入口"><a href="#加载-so-文件入口" class="headerlink" title="加载 so 文件入口"></a>加载 so 文件入口</h4><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line">JNIEXPORT jint JNICALL</div><div class="line">JNI_OnLoad(JavaVM *vm, <span class="keyword">void</span> *reserved) &#123;</div><div class="line">    JNIEnv *env;</div><div class="line">    LOGI(<span class="string">"  JNI_OnLoad  "</span>);</div><div class="line">    <span class="keyword">if</span> (vm-&gt;GetEnv((<span class="keyword">void</span> **) (&amp;env), JNI_VERSION_1_6) != JNI_OK) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    LOGI(<span class="string">"start checkSignature"</span>);</div><div class="line">    <span class="comment">// 调用验证签名</span></div><div class="line">    <span class="keyword">if</span> (checkSignature(env) != JNI_TRUE) &#123;</div><div class="line">        LOGI(<span class="string">"checkSignature error"</span>);</div><div class="line">        <span class="comment">// 签名失败</span></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当签名失败的时候，表示 so 文件加载失败，无法执行后续操作，比如获取 token md5加密 key</p>
<h4 id="通过-Java-反射获取-Context"><a href="#通过-Java-反射获取-Context" class="headerlink" title="通过 Java 反射获取 Context"></a>通过 Java 反射获取 Context</h4><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> jboolean <span class="title">checkSignature</span><span class="params">(JNIEnv *env)</span> </span>&#123;</div><div class="line">    <span class="comment">// 1.查找 App 的 ContextHolder 类</span></div><div class="line">    jclass classNativeContextHolder = env-&gt;FindClass(CLASS_NAME_NATIVECONTEXT);</div><div class="line">    <span class="comment">// 2.找到 getContext 静态方法</span></div><div class="line">    jmethodID midGetContext = env-&gt;GetStaticMethodID(classNativeContextHolder,</div><div class="line">                                                     METHOD_NAME_GET_CONTEXT,</div><div class="line">                                                     METHOD_SIGNATURE_GETCONTEXT);</div><div class="line">    <span class="comment">// 3.调用 getContext 方法获取 Context 对象</span></div><div class="line">    jobject appContext = env-&gt;CallStaticObjectMethod(classNativeContextHolder, midGetContext);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (appContext != <span class="literal">NULL</span>) &#123;</div><div class="line">        jboolean signatureValid = Java_com_laipaiya_jni_MainActivity_checkSignature(</div><div class="line">                env, appContext);</div><div class="line">        <span class="keyword">return</span> signatureValid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> JNI_FALSE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用 Java_com_laipaiya_jni_MainActivity_checkSignature 方法比较签名是否想用。</p>
<h4 id="比较当前签名和-release-签名"><a href="#比较当前签名和-release-签名" class="headerlink" title="比较当前签名和 release 签名"></a>比较当前签名和 release 签名</h4><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT jboolean JNICALL</div><div class="line">Java_com_laipaiya_jni_MainActivity_checkSignature(</div><div class="line">        JNIEnv *env, jobject context) &#123;</div><div class="line">    jstring appSignature = loadSignature(env, context);          <span class="comment">// 获取当前签名</span></div><div class="line">    jstring releaseSignature = env-&gt;NewStringUTF(APP_SIGNATURE); <span class="comment">// release 版签名 </span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *charAppSignature = env-&gt;GetStringUTFChars(appSignature, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *charReleaseSignature = env-&gt;GetStringUTFChars(releaseSignature, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    LOGI(<span class="string">"  start cmp  getSignature"</span>);</div><div class="line">    __android_log_print(ANDROID_LOG_INFO, LOG_TAG, charAppSignature);</div><div class="line">    LOGI(<span class="string">"  start cmp  getReleaseSignature"</span>);</div><div class="line">    __android_log_print(ANDROID_LOG_INFO, LOG_TAG, charAppSignature);</div><div class="line"></div><div class="line">    jboolean result = JNI_FALSE;</div><div class="line">    <span class="comment">// 判断比较是否相等</span></div><div class="line">    <span class="keyword">if</span> (charAppSignature != <span class="literal">NULL</span> &amp;&amp; charReleaseSignature != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(charAppSignature, charReleaseSignature) == <span class="number">0</span>) &#123;</div><div class="line">            result = JNI_TRUE;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    env-&gt;ReleaseStringUTFChars(appSignature, charAppSignature);</div><div class="line">    env-&gt;ReleaseStringUTFChars(releaseSignature, charReleaseSignature);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取当前签名"><a href="#获取当前签名" class="headerlink" title="获取当前签名"></a>获取当前签名</h4><p>获取当前 App 签名，并调用 md5 方法 进行加密</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function">jstring <span class="title">loadSignature</span><span class="params">(JNIEnv *env, jobject context)</span> </span>&#123;</div><div class="line">    <span class="comment">// 获得Context类</span></div><div class="line">    jclass cls = env-&gt;GetObjectClass(context);</div><div class="line">    <span class="comment">// 得到getPackageManager方法的ID</span></div><div class="line">    jmethodID mid = env-&gt;GetMethodID(cls, <span class="string">"getPackageManager"</span>,</div><div class="line">                                     <span class="string">"()Landroid/content/pm/PackageManager;"</span>);</div><div class="line">    <span class="comment">// 获得应用包的管理器</span></div><div class="line">    jobject pm = env-&gt;CallObjectMethod(context, mid);</div><div class="line"></div><div class="line">    <span class="comment">// 得到getPackageName方法的ID</span></div><div class="line">    mid = env-&gt;GetMethodID(cls, <span class="string">"getPackageName"</span>, <span class="string">"()Ljava/lang/String;"</span>);</div><div class="line">    <span class="comment">// 获得当前应用包名</span></div><div class="line">    jstring packageName = (jstring) env-&gt;CallObjectMethod(context, mid);</div><div class="line">    <span class="comment">// 获得PackageManager类</span></div><div class="line">    cls = env-&gt;GetObjectClass(pm);</div><div class="line">    <span class="comment">// 得到getPackageInfo方法的ID</span></div><div class="line">    mid = env-&gt;GetMethodID(cls, <span class="string">"getPackageInfo"</span>,</div><div class="line">                           <span class="string">"(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;"</span>);</div><div class="line">    <span class="comment">// 获得应用包的信息</span></div><div class="line">    jobject packageInfo = env-&gt;CallObjectMethod(pm, mid, packageName, <span class="number">0x40</span>);        </div><div class="line">    <span class="comment">// 获得PackageInfo 类</span></div><div class="line">    cls = env-&gt;GetObjectClass(packageInfo);</div><div class="line">    <span class="comment">// 获得签名数组属性的ID</span></div><div class="line">    jfieldID fid = env-&gt;GetFieldID(cls, <span class="string">"signatures"</span>, <span class="string">"[Landroid/content/pm/Signature;"</span>);</div><div class="line">    <span class="comment">// 得到签名数组</span></div><div class="line">    jobjectArray signatures = (jobjectArray) env-&gt;GetObjectField(packageInfo, fid);</div><div class="line">    <span class="comment">// 得到签名</span></div><div class="line">    jobject signature = env-&gt;GetObjectArrayElement(signatures, <span class="number">0</span>);</div><div class="line">    <span class="comment">// 获得Signature类</span></div><div class="line">    cls = env-&gt;GetObjectClass(signature);</div><div class="line">    <span class="comment">// 得到toCharsString方法的ID</span></div><div class="line">    mid = env-&gt;GetMethodID(cls, <span class="string">"toByteArray"</span>, <span class="string">"()[B"</span>);</div><div class="line">    <span class="comment">// 返回当前应用签名信息</span></div><div class="line">    jbyteArray signatureByteArray = (jbyteArray) env-&gt;CallObjectMethod(signature, mid);</div><div class="line">    <span class="keyword">return</span> ToMd5(env, signatureByteArray);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MD5-对签名进行加密"><a href="#MD5-对签名进行加密" class="headerlink" title="MD5 对签名进行加密"></a>MD5 对签名进行加密</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function">jstring <span class="title">ToMd5</span><span class="params">(JNIEnv *env, jbyteArray source)</span> </span>&#123;</div><div class="line">    <span class="comment">// MessageDigest类</span></div><div class="line">    jclass classMessageDigest = env-&gt;FindClass(<span class="string">"java/security/MessageDigest"</span>);</div><div class="line">    <span class="comment">// MessageDigest.getInstance()静态方法</span></div><div class="line">    jmethodID midGetInstance = env-&gt;GetStaticMethodID(classMessageDigest, <span class="string">"getInstance"</span>,</div><div class="line">                                                      <span class="string">"(Ljava/lang/String;)Ljava/security/MessageDigest;"</span>);</div><div class="line">    <span class="comment">// MessageDigest object</span></div><div class="line">    jobject objMessageDigest = env-&gt;CallStaticObjectMethod(classMessageDigest, midGetInstance,</div><div class="line">                                                           env-&gt;NewStringUTF(<span class="string">"md5"</span>));</div><div class="line"></div><div class="line">    <span class="comment">// update方法，这个函数的返回值是void，写V</span></div><div class="line">    jmethodID midUpdate = env-&gt;GetMethodID(classMessageDigest, <span class="string">"update"</span>, <span class="string">"([B)V"</span>);</div><div class="line">    env-&gt;CallVoidMethod(objMessageDigest, midUpdate, source);</div><div class="line">    <span class="comment">// digest方法</span></div><div class="line">    jmethodID midDigest = env-&gt;GetMethodID(classMessageDigest, <span class="string">"digest"</span>, <span class="string">"()[B"</span>);</div><div class="line">    jbyteArray objArraySign = (jbyteArray) env-&gt;CallObjectMethod(objMessageDigest, midDigest);</div><div class="line">    jsize intArrayLength = env-&gt;GetArrayLength(objArraySign);</div><div class="line">    jbyte *byte_array_elements = env-&gt;GetByteArrayElements(objArraySign, NULL);</div><div class="line">    size_t length = (size_t) intArrayLength * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> *char_result = (<span class="keyword">char</span> *) malloc(length);</div><div class="line">    memset(char_result, <span class="number">0</span>, length);</div><div class="line"></div><div class="line">    <span class="comment">// 将byte数组转换成16进制字符串，发现这里不用强转，jbyte和unsigned char应该字节数是一样的</span></div><div class="line">    ByteToHexStr((<span class="keyword">const</span> <span class="keyword">char</span> *) byte_array_elements, char_result, intArrayLength);</div><div class="line">    <span class="comment">// 在末尾补\0</span></div><div class="line">    *(char_result + intArrayLength * <span class="number">2</span>) = <span class="string">'\0'</span>;</div><div class="line"></div><div class="line">    jstring stringResult = env-&gt;NewStringUTF(char_result);</div><div class="line">    <span class="comment">// release</span></div><div class="line">    env-&gt;ReleaseByteArrayElements(objArraySign, byte_array_elements, JNI_ABORT);</div><div class="line">    <span class="comment">// 释放指针使用free</span></div><div class="line">    free(char_result);</div><div class="line">    <span class="keyword">return</span> stringResult;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="byte数组转换成16进制字符串"><a href="#byte数组转换成16进制字符串" class="headerlink" title="byte数组转换成16进制字符串"></a>byte数组转换成16进制字符串</h4><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ByteToHexStr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *source, <span class="keyword">char</span> *dest, <span class="keyword">int</span> sourceLen)</span> </span>&#123;</div><div class="line">    <span class="keyword">short</span> i;</div><div class="line">    <span class="keyword">char</span> highByte, lowByte;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sourceLen; i++) &#123;</div><div class="line">        highByte = source[i] &gt;&gt; <span class="number">4</span>;</div><div class="line">        lowByte = source[i] &amp; <span class="number">0x0f</span>;</div><div class="line">        highByte += <span class="number">0x30</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (highByte &gt; <span class="number">0x39</span>) &#123;</div><div class="line">            dest[i * <span class="number">2</span>] = highByte + <span class="number">0x07</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            dest[i * <span class="number">2</span>] = highByte;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        lowByte += <span class="number">0x30</span>;</div><div class="line">        <span class="keyword">if</span> (lowByte &gt; <span class="number">0x39</span>) &#123;</div><div class="line">            dest[i * <span class="number">2</span> + <span class="number">1</span>] = lowByte + <span class="number">0x07</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            dest[i * <span class="number">2</span> + <span class="number">1</span>] = lowByte;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="创建获取token-key-方法"><a href="#创建获取token-key-方法" class="headerlink" title="创建获取token key 方法"></a>创建获取token key 方法</h4><p>使用场景，很多情况下我们把用户登录后的 token 存储下来，以免下次重新登录。这个时候我们需要使用 token key 对服务端返回下来的 token 进行加密。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT jstring JNICALL</div><div class="line">Java_com_laipaiya_jni_MainActivity_getTokenKey</div><div class="line">        (JNIEnv *env, jclass) &#123;</div><div class="line">    <span class="keyword">return</span> env -&gt; NewStringUTF(APP_TOKEN_KEY);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们获得 token key 之后，就可以加密，然后任意存储加密后的数据即可。当我们需要再次使用的时候，只需要对其解密就能得到 token 了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整体思路：so 文件在加载时会自动加载 JNI_OnLoad() ，在该方法中对应用签名进行比较，如果签名验证失败，直接在 JNI_OnLoad() 中返回失败。如果验证通过就可以通过 JNI 调用方法获取相应的值。这样可畏是既解决了通常的数据外泄，又解决了 so 文件被提
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos 7 下搭建 LAMP 服务·及 HTTPS</title>
    <link href="http://www.tipdev.xyz/2017/11/14/2017-11-14-Centos%207%20%E4%B8%8B%E6%90%AD%E5%BB%BA%20LAMP%20%E6%9C%8D%E5%8A%A1%C2%B7%E5%8F%8A%20HTTPS/"/>
    <id>http://www.tipdev.xyz/2017/11/14/2017-11-14-Centos 7 下搭建 LAMP 服务·及 HTTPS/</id>
    <published>2017-11-13T16:00:00.000Z</published>
    <updated>2017-11-14T08:46:44.530Z</updated>
    
    <content type="html"><![CDATA[<p>LAMP 是指一组通常一起使用来运行动态网页或者服务器的自由软件名称缩写：</p>
<ul>
<li>Linux</li>
<li>Apache</li>
<li>MySQL 或者 MariaDB</li>
<li>PHP、Per 或者 Python</li>
</ul>
<p>接下来就讲讲我最近搭建这些服务的心得吧，虽然网上有很多 LAMP 的一键安装包，但这样就没有动手实践的意义了。</p>
<h4 id="一、Apache服务搭建"><a href="#一、Apache服务搭建" class="headerlink" title="一、Apache服务搭建"></a>一、Apache服务搭建</h4><p>​早在2013就开始接触到了 Apache，我记得当时还是在 <a href="https://zh.wikipedia.org/wiki/Fedora" target="_blank" rel="external">Fedora</a> 环境下使用的，不过比起当时，现在已经对 Apache 的认识更加深入了。</p>
<p>Step1.安装 httpd</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum install -y httpd</div></pre></td></tr></table></figure>
<p>Step2.配置 httpd.conf</p>
<p>​    关于 apache 的配置，全部可以在这个文件夹中配置，包括绑定域名、监听端口、项目目录、apache 模块等等，都可以在这里设置。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 设置监听端口</span></div><div class="line">Listen 80</div><div class="line"><span class="comment"># 项目目录</span></div><div class="line">DocumentRoot <span class="string">"/var/www/html"</span></div></pre></td></tr></table></figure>
<h4 id="二、开启-HTTPS-服务"><a href="#二、开启-HTTPS-服务" class="headerlink" title="二、开启 HTTPS 服务"></a>二、开启 HTTPS 服务</h4><p>HTTPS 又称超文本传输安全协议，是一种通过计算机网络进行安全通信的传输协议，HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>
<h5 id="自签名证书安装"><a href="#自签名证书安装" class="headerlink" title="# 自签名证书安装"></a># 自签名证书安装</h5><p>Step1.安装 apache ssl 模块和 openssl</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum install mod_ssl openssl</div></pre></td></tr></table></figure>
<p>Step2.生成 2048 签名文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl genrsa -out server.key 2048</div></pre></td></tr></table></figure>
<p>Step3.对证书进行签名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure>
<p>Step4.生成 X509 的自签名证书，有效期 3650 天</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt</div></pre></td></tr></table></figure>
<p>Step5.复制签名文件到 /etc/pki/tls 对应目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">cp server.crt /etc/pki/tls/certs/</div><div class="line">cp server.key /etc/pki/tls/private/        </div><div class="line">cp server.csr /etc/pki/tls/private/</div></pre></td></tr></table></figure>
<p>Step6.修改 ssl.conf 配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /etc/httpd/conf.d/ssl.conf 修改一下内容</span></div><div class="line">&lt;VirtualHost _default_:443&gt;</div><div class="line">	DocumentRoot <span class="string">"/var/www/html"</span></div><div class="line">	ServerName xxx.xxx.com:443</div><div class="line">	SSLEngine on</div><div class="line">	SSLCertificateFile /etc/pki/tls/certs/server.crt</div><div class="line">	SSLCertificateKeyFile /etc/pki/tls/private/server.key</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
<p>Step7.重启 Apache</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 注意 记得开启443端口，如果已经开启，请忽略</span></div><div class="line">sudo iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT</div><div class="line"><span class="comment"># 查看端口情况</span></div><div class="line">netstat -ntl</div><div class="line"><span class="comment"># 重启 apache</span></div><div class="line">systemctl restart httpd</div></pre></td></tr></table></figure>
<p>此时，在浏览器打开你在 Step6 设置的域名，例如：<a href="https://xxx.xxx.com" target="_blank" rel="external">https://xxx.xxx.com</a> 就能访问 https 网站了。</p>
<p>注意：显示不安全属于正常情况，如果你不希望看到不安全，你可以使用下面这种方式。</p>
<h5 id="免费-收费-SLL-证书"><a href="#免费-收费-SLL-证书" class="headerlink" title="#免费/收费 SLL 证书"></a>#免费/收费 SLL 证书</h5><p>SSL 证书分为以下几种：</p>
<ul>
<li><p>域名验证型 DV        一般用于个人网站</p>
</li>
<li><p>组织验证型 OV        中小型企业</p>
</li>
<li><p>扩展验证型 EV         大型企业</p>
</li>
</ul>
<p>免费的 DV 提供商有很多，这里我使用的是 Let’s Encrypt ，缺点就是需要每隔三个月续期一次。后两者一般都是收费的。</p>
<p>Setp1.下载letsencrypt</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/letsencrypt/letsencrypt</div><div class="line"><span class="built_in">cd</span> letsencrypt</div></pre></td></tr></table></figure>
<p>Step2.安装证书</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 注意先暂停 httpd</span></div><div class="line">systemctl stop httpd</div><div class="line"><span class="comment"># 执行以下命令，接着按照提示一步步进行</span></div><div class="line">./letsencrypt-auto certonly  --email xxx@email.com <span class="_">-d</span> xxx.xxx.com</div></pre></td></tr></table></figure>
<p>在执行完成后，当你看到 Congratulations! 并且在 /etc/letsencrypt 目录下生成一个 live 文件夹的时候说明安装成功了。</p>
<p>Step3.修改 ssl.conf 配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /etc/httpd/conf.d/ssl.conf </span></div><div class="line">SSLCertificateFile /etc/letsencrypt/live/xxx.xxx.com/fullchain.pem</div><div class="line">SSLCertificateKeyFile /etc/letsencrypt/live/xxx.xxx.com/privkey.pem</div></pre></td></tr></table></figure>
<p>Step4.强制跳转 https</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /etc/httpd/conf/httpd.conf ,在 &lt;Directory&gt; 中添加</span></div><div class="line">RewriteEngine on</div><div class="line">RewriteCond %&#123;SERVER_PORT&#125; !^443$</div><div class="line">RewriteRule ^(.*)?$ https://%&#123;SERVER_NAME&#125;/ [L,R]</div></pre></td></tr></table></figure>
<p>Step5.重启 Apache</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">systmectl restart httpd</div></pre></td></tr></table></figure>
<p>打开浏览器，看看成果吧。</p>
<h4 id="三、安装-MySQL"><a href="#三、安装-MySQL" class="headerlink" title="三、安装 MySQL"></a>三、安装 MySQL</h4><p>Step1.安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum -y install mysql mysql-server</div></pre></td></tr></table></figure>
<p>Step2.启动 MySQL</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">systemctl start mysql</div></pre></td></tr></table></figure>
<p>Step3.登录 MySQL</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 登录 mysql</span></div><div class="line">mysql -u root -p</div><div class="line">use mysql;</div><div class="line"><span class="comment"># 重置 root 密码</span></div><div class="line">grant usage on *.* to <span class="string">'root'</span> identified by <span class="string">'password'</span>;</div><div class="line"><span class="comment"># 保存设置</span></div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<h4 id="四、安装-php"><a href="#四、安装-php" class="headerlink" title="四、安装 php"></a>四、安装 php</h4><p>Step1.安装 epel-release 扩展 yum 软件源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum install epel-release</div><div class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</div></pre></td></tr></table></figure>
<p>Step2.安装 php7.0</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum install php70w</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LAMP 是指一组通常一起使用来运行动态网页或者服务器的自由软件名称缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Apache&lt;/li&gt;
&lt;li&gt;MySQL 或者 MariaDB&lt;/li&gt;
&lt;li&gt;PHP、Per 或者 Python&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Let&#39;s 炫酷终端</title>
    <link href="http://www.tipdev.xyz/2017/11/07/2017-11-07-Let&#39;s%20%E7%82%AB%E9%85%B7%E7%BB%88%E7%AB%AF/"/>
    <id>http://www.tipdev.xyz/2017/11/07/2017-11-07-Let&#39;s 炫酷终端/</id>
    <published>2017-11-06T16:00:00.000Z</published>
    <updated>2017-11-07T03:50:49.719Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>炫酷的终端iTerm2</p>
</li>
<li><p>我的Vim</p>
<p>​</p>
</li>
</ul>
<h4 id="一、炫酷的终端iTerm2-oh-my-zsh"><a href="#一、炫酷的终端iTerm2-oh-my-zsh" class="headerlink" title="一、炫酷的终端iTerm2+oh my zsh"></a>一、炫酷的终端iTerm2+oh my zsh</h4><p>话不多说，先上效果图：</p>
<p><img src="/images/let&#39;s_iterm2/let&#39;s_iterm2_1.png" alt="let&#39;s_iterm2_1"></p>
<ol>
<li>实现以上效果，你需要先安装iTerm2，<a href="https://www.iterm2.com/downloads.html" target="_blank" rel="external">传送门</a></li>
<li>接着我们安装oh my zsh设置终端的主题， 什么是oh my zsh呢? <a href="http://ohmyz.sh/" target="_blank" rel="external">传送门</a></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 安装oh my zsh</span></div><div class="line">$ sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<p>到这里，能看到大致上已经完成了效果图的90%效果。</p>
<ol>
<li><p>开启iTerm2的Hotkey 功能，在使用的过程中让我屡试不爽的功能就是Hotkey功能，怎么开启呢？菜单栏iTerm2—&gt;Preferences—&gt;选择Keys标签—&gt; 勾选Hotkey 下的Show/hide all windows with a system-wide hotkey—&gt;Create a Dedicated Hotkey Window。然后切换到Profiles标签，就会发现在Profile Name下多了一个Hotkey Window</p>
</li>
<li><p>设置iTerm2配色</p>
<p>我这是用的是一个第三方的配色主题space-vim-dark，你也可以选择自己喜欢的主题来使用。</p>
</li>
</ol>
<h4 id="二、我的Vim配置"><a href="#二、我的Vim配置" class="headerlink" title="二、我的Vim配置"></a>二、我的Vim配置</h4><p>老规矩，先上效果图：事先说明下我使用Vim主要用来写Python</p>
<p><img src="/images/let&#39;s_iterm2/let&#39;s_iterm2_2.png" alt="let&#39;s_iterm2_1"></p>
<ol>
<li><p>安装插件管理器Vundle</p>
<p>首先下载Vundle源码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure>
<p>在vim ~/.vimrc 中添加如下代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="built_in">set</span> nocompatible</div><div class="line">filetype off</div><div class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle<span class="comment">#begin()</span></div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line">call vundle<span class="comment">#end()</span></div><div class="line">filetype plugin indent on</div></pre></td></tr></table></figure>
</li>
<li><p>安装代码提示YouCompleteMe插件</p>
<p>在 vim ~/.vimrc 文件中添加如下代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">call vundle<span class="comment">#begin()</span></div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line"><span class="comment"># 添加</span></div><div class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></div><div class="line">call vundle<span class="comment">#end()</span></div></pre></td></tr></table></figure>
<p>执行:PluginInstall  这个过程可能会比较漫长</p>
</li>
<li><p>安装语法检查插件ale</p>
<p>同样的在 vim ~/.vimrc 文件中添加如下代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">call vundle<span class="comment">#begin()</span></div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></div><div class="line"><span class="comment"># 添加</span></div><div class="line">Plugin <span class="string">'w0rp/ale'</span></div><div class="line">call vundle<span class="comment">#end()</span></div></pre></td></tr></table></figure>
<p>执行:PluginInstall ，此时你只需要等待，直到控制器打出done! 即可</p>
</li>
<li><p>安装python语法检查工具flake8</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">sudo pip install flake8</div></pre></td></tr></table></figure>
<p>ale支持一下语言（具体安装方法请查看<a href="https://github.com/w0rp/ale#supported-languages" target="_blank" rel="external">ale repo</a>  <strong>Languages and Tools</strong>）</p>
<p><img src="/images/let&#39;s_iterm2/let&#39;s_iterm2_3.png" alt="let&#39;s_iterm2_1"></p>
</li>
</ol>
<p>最后贴出我的.vimrc 配置文件:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="built_in">set</span> nocompatible</div><div class="line">filetype off</div><div class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle<span class="comment">#begin()</span></div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></div><div class="line">Plugin <span class="string">'w0rp/ale'</span></div><div class="line">call vundle<span class="comment">#end()</span></div><div class="line">filetype plugin indent on</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">" 语法高亮</span></div><div class="line"><span class="string">syntax on</span></div><div class="line"><span class="string">"</span> 用浅色高亮当前行</div><div class="line">autocmd InsertLeave * se nocul</div><div class="line">autocmd InsertEnter * se cul</div><div class="line"><span class="string">" 智能对齐</span></div><div class="line"><span class="string">set smartindent</span></div><div class="line"><span class="string">"</span> 自动对齐</div><div class="line"><span class="built_in">set</span> autoindent</div><div class="line"><span class="string">" tab键的宽度</span></div><div class="line"><span class="string">set tabstop=4</span></div><div class="line"><span class="string">"</span> 统一缩进为4</div><div class="line"><span class="built_in">set</span> softtabstop=4</div><div class="line"><span class="string">" 显示行号</span></div><div class="line"><span class="string">set number</span></div><div class="line"><span class="string">"</span> 历史记录数</div><div class="line"><span class="built_in">set</span> clipboard+=unnamed</div><div class="line"><span class="built_in">set</span> <span class="built_in">history</span>=50</div><div class="line"><span class="string">" 自动匹配括号</span></div><div class="line"><span class="string">inoremap ( ()&lt;LEFT&gt;</span></div><div class="line"><span class="string">inoremap [ []&lt;LEFT&gt;</span></div><div class="line"><span class="string">inoremap &#123; &#123;&#125;&lt;LEFT&gt;</span></div><div class="line"><span class="string">"</span> 关闭ycm的方法previw窗口</div><div class="line"><span class="built_in">set</span> completeopt-=preview</div><div class="line"><span class="string">" 设置主题</span></div><div class="line"><span class="string">colorscheme space-vim-dark</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"</span> ale配置</div><div class="line"><span class="string">" 显示侧边栏</span></div><div class="line"><span class="string">let g:ale_sign_column_always = 1</span></div><div class="line"><span class="string">let g:ale_set_highlights = 0</span></div><div class="line"><span class="string">"</span> 自定义图标</div><div class="line"><span class="built_in">let</span> g:ale_sign_error = <span class="string">'✗'</span></div><div class="line"><span class="built_in">let</span> g:ale_sign_warning = <span class="string">'⚡'</span></div><div class="line"><span class="string">"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告</span></div><div class="line"><span class="string">nmap sp &lt;Plug&gt;(ale_previous_wrap)</span></div><div class="line"><span class="string">nmap sn &lt;Plug&gt;(ale_next_wrap)</span></div><div class="line"><span class="string">"</span>&lt;Leader&gt;s触发/关闭语法检查</div><div class="line">nmap &lt;Leader&gt;s :ALEToggle&lt;CR&gt;</div><div class="line"><span class="string">"&lt;Leader&gt;d查看错误或警告的详细信息</span></div><div class="line"><span class="string">nmap &lt;Leader&gt;d :ALEDetail&lt;CR&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;炫酷的终端iTerm2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我的Vim&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;一、炫酷的终端iTerm2-oh-my-zsh&quot;&gt;&lt;a href=&quot;#一、炫酷的终端iTerm2-oh-my-zsh&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Use Dagger2.11 in MVP</title>
    <link href="http://www.tipdev.xyz/2017/08/24/2017-08-24-Use%20Dagger2.11%20in%20MVP/"/>
    <id>http://www.tipdev.xyz/2017/08/24/2017-08-24-Use Dagger2.11 in MVP/</id>
    <published>2017-08-23T16:00:00.000Z</published>
    <updated>2017-11-07T03:21:53.415Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在学习Google最新发布的架构<a href="https://developer.android.com/topic/libraries/architecture/index.html" target="_blank" rel="external">Android Architecture Components</a> 的时候时，使用到了Dagger2，一直以来对Dagger的使用都不怎么熟练。于是这次花了点时间学习了一下，一下是我对Dagger最新2.11版本的使用记录。</p>
<p>在这之前需要先了解</p>
<p>​    什么是依赖注入（Dependent injection）？</p>
<p>​    依赖注入的实现方式</p>
<p>​    依赖注入的好处</p>
<p>​    Dagger的知识要点</p>
<h3 id="1-依赖注入（DI）"><a href="#1-依赖注入（DI）" class="headerlink" title="1.依赖注入（DI）"></a>1.依赖注入（DI）</h3><p>​    当某个角色(可能<strong>是</strong>一个Java实例，调用者)需要另一个角色(另一个Java实例，被调用者)的协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。可以简单的理解为：一般情况下A类 依赖于 B类时，我们在A类中new 出一个实例，而依赖注入表示从外部创建好B类实例，直接传递给A类。</p>
<h3 id="2-注入方式"><a href="#2-注入方式" class="headerlink" title="2.注入方式"></a>2.注入方式</h3><p>依赖注入的实现方式：</p>
<ul>
<li><p>基于接口</p>
</li>
<li><p>基于set方法</p>
</li>
<li><p>基于构造函数</p>
</li>
<li><p>基于注解（Dagger2就是使用这种方式注入的@Inject）</p>
<p>​</p>
</li>
</ul>
<h3 id="3-依赖注入的好处"><a href="#3-依赖注入的好处" class="headerlink" title="3.依赖注入的好处"></a>3.依赖注入的好处</h3><p>​    两个字：解耦</p>
<h3 id="4-Dagger的知识要点"><a href="#4-Dagger的知识要点" class="headerlink" title="4.Dagger的知识要点"></a>4.Dagger的知识要点</h3><p>​    @Comonent  用来将@Inject 和@Module联系起来的桥梁，在@Module中获取依赖并且注入到@Inject</p>
<p>​    @Inject           Dagger2会实例化带有此注解的类</p>
<p>​    @Module       用于提供依赖</p>
<p>​        @Provide      </p>
<p>​        @Singleton   </p>
<p>​    @ContributesAndroidInjector（2.11新增）  用来生成对应的 Subcomponent</p>
<p>​    @Binds</p>
<h3 id="5-Dagger使用"><a href="#5-Dagger使用" class="headerlink" title="5.Dagger使用"></a>5.Dagger使用</h3><p>​    首先在build.gradle中添加如下dagger相关依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">annotationProcessor <span class="string">'com.google.dagger:dagger-compiler:2.11'</span></div><div class="line">annotationProcessor <span class="string">'com.google.dagger:dagger-android-processor:2.11'</span></div><div class="line">implementation <span class="string">'com.google.dagger:dagger:2.11'</span></div><div class="line">implementation <span class="string">'com.google.dagger:dagger-android:2.11'</span></div><div class="line">implementation <span class="string">'com.google.dagger:dagger-android-support:2.11'</span></div></pre></td></tr></table></figure>
<p>​    在Application 中实现HasActivityInjector</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">HasActivityInjector</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingAndroidInjector;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        DaggerAppComontent.builder()</div><div class="line">            .application(<span class="keyword">this</span>)</div><div class="line">            .build()</div><div class="line">            .inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Activity&gt; <span class="title">activityInjector</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dispatchingAndroidInjector;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    在Activity中实现HasFragmentInjector</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GankActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">HasFragmentInjector</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    DispatchingAndroidInjector&lt;Fragment&gt; dispatchingAndroidInjector;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_gank);</div><div class="line"></div><div class="line">        getFragmentManager().beginTransaction()</div><div class="line">            .add(R.id.fragment, <span class="keyword">new</span> GankFragment())</div><div class="line">            .commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Fragment&gt; <span class="title">fragmentInjector</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dispatchingAndroidInjector;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    创建NetworkModule</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkModule</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*okhttp logging*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HttpLoggingInterceptor <span class="title">provideHttpLogginInterceptor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*okhttp http header expample:Content-Type*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HeaderInterceptor <span class="title">provideHeaderInterception</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeaderInterceptor();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*okhttp config*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">provideOkHttpClient</span><span class="params">(HeaderInterceptor headerInterceptor, HttpLoggingInterceptor loggingInterceptor)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">            .connectTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</div><div class="line">            .addInterceptor(headerInterceptor)</div><div class="line">            .addInterceptor(loggingInterceptor)</div><div class="line">            .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*retrofit gson*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="keyword">public</span> Converter.<span class="function">Factory <span class="title">provideConverterFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> GsonConverterFactory.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*retrofit rxjava2*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="keyword">public</span> CallAdapter.<span class="function">Factory <span class="title">provideCallAdapterFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> RxJava2CallAdapterFactory.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*retrofit config*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Retrofit <span class="title">provideRetrofit</span><span class="params">(Converter.Factory converterFactory,</span></span></div><div class="line"><span class="function"><span class="params">                                    CallAdapter.Factory callAdapterFactory, OkHttpClient client)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">            .baseUrl(<span class="string">"http://gank.io/api/"</span>)</div><div class="line">            .addConverterFactory(converterFactory)</div><div class="line">            .addCallAdapterFactory(callAdapterFactory)</div><div class="line">            .client(client)</div><div class="line">            .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*retrofit service*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> GankService <span class="title">provideGankService</span><span class="params">(Retrofit retrofit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(GankService.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    创建全局AppModule</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Module</span>(includes = &#123;</div><div class="line">    NetworkModule.class&#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">Context <span class="title">provideContext</span><span class="params">(App app)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> app;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">CompositeDisposable <span class="title">provideCompositeDisposable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeDisposable();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    创建统一管理依赖于AppComponent的Module添加的中间件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = GankFragmentModule.class)</div><div class="line">    <span class="function"><span class="keyword">abstract</span> GankActivity <span class="title">contributeGankActivity</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GankFragmentModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ContributesAndroidInjector</span></div><div class="line">    <span class="function"><span class="keyword">abstract</span> GankFragment <span class="title">contributeGankFragment</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Binds</span></div><div class="line">    <span class="keyword">abstract</span> GankContract.<span class="function">GankPresenter <span class="title">bindsPresenter</span><span class="params">(GankPresenter presenter)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    最后创建AppComontent</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;</div><div class="line">    AndroidSupportInjectionModule.class,</div><div class="line">    AppModule.class,</div><div class="line">    ActivityModule.class</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComontent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Component</span>.Builder</div><div class="line">    <span class="class"><span class="keyword">interface</span>  <span class="title">Builder</span></span>&#123;</div><div class="line">        <span class="meta">@BindsInstance</span></div><div class="line">        <span class="function">Builder <span class="title">application</span><span class="params">(App app)</span></span>;</div><div class="line">        <span class="function">AppComontent <span class="title">build</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(App app)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间在学习Google最新发布的架构&lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Androi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>服务端与客户端敏感数据通信的最佳实践</title>
    <link href="http://www.tipdev.xyz/2017/06/22/2017-06-22-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://www.tipdev.xyz/2017/06/22/2017-06-22-服务端与客户端敏感数据通信的最佳实践/</id>
    <published>2017-06-21T16:00:00.000Z</published>
    <updated>2017-06-22T15:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对称加密方式（例如AES）"><a href="#对称加密方式（例如AES）" class="headerlink" title="对称加密方式（例如AES）"></a>对称加密方式（例如AES）</h3><p>对称加密方式通过密码（secret key）对敏感数据进行加密，比如考虑到用户登录时账号以及密码不利于暴露出来，可以通过对称加密的方式传递，客户端把敏感数据进行加密后发送给服务端，服务端使用相同的密码进行解密，这样即使在数据传输的时候被拦截了发送的数据，也不会完全的暴露出来，所以它不知道密码就无法进行解密数据。</p>
<p>当然这种加密方式存在最致命的缺点，一旦密码（secret key）被暴露就相当于把敏感数据直接公布出来了。</p>
<h3 id="非对称加密（例如：RSA）"><a href="#非对称加密（例如：RSA）" class="headerlink" title="非对称加密（例如：RSA）"></a>非对称加密（例如：RSA）</h3><p>非对称加密是生成一个私钥和一个公钥，公钥用于对敏感数据加密，私钥用于数据解密，并且只能使用私钥进行解密。这将意味着可以安全的在程序中运送公钥。</p>
<p>优点：安全性高<br>缺点：一次只能加密非常小的数据文本（128个字节）</p>
<h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>混合模式结合了对称模式和非对称模式的优点，我们首先在服务端使用RSA生成公钥和私钥；在客户端使用AES生成密码（secret key），使用密码对敏感数据进行加密，得到敏感数据密文（encrypted text），接着依然在客户端获取服务端生成的公钥，对AES密码（secret key）进行加密，得到AES密钥密文（encrypted secret key），然后把敏感信息密文（encrypted text） 和 AES密钥密文（encrypted secret key）  传递给服务器；最后回到服务端，使用私钥对AES密钥密文（encrypted secret key）进行解密，得到密码（secret key），最后使用密码（secret key）对敏感信息密文（encrypted text）进行解密，得到敏感数据。</p>
<p>好吧，我知道有点绕，没关系，我总结了一下几点：</p>
<ol>
<li>服务端RSA生成【公钥】和【私钥】，私钥存储服务端。</li>
<li>客户端使用【AES密码】对【敏感数据】加密，得到【RSA敏感数据密文】</li>
<li>客户端使用【公钥】对【AES密码】进行加密，得到【AES密码密文】</li>
<li>服务端使用【私钥】对【AES密码密文】解密，得到【AES密码】</li>
<li>服务端使用【AES密码】对【RSA敏感数据密文】，得到【敏感数据】</li>
</ol>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>​    这样就有效的解决了客户端和服务端敏感数据传递存在的安全隐患，这不仅仅是一个解决方案，更应该是每个开发者遵循的一项责任。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对称加密方式（例如AES）&quot;&gt;&lt;a href=&quot;#对称加密方式（例如AES）&quot; class=&quot;headerlink&quot; title=&quot;对称加密方式（例如AES）&quot;&gt;&lt;/a&gt;对称加密方式（例如AES）&lt;/h3&gt;&lt;p&gt;对称加密方式通过密码（secret key）对敏感数
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab搭建记录</title>
    <link href="http://www.tipdev.xyz/2017/05/31/2017-05-31-GitLab%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.tipdev.xyz/2017/05/31/2017-05-31-GitLab搭建记录/</id>
    <published>2017-05-30T16:00:00.000Z</published>
    <updated>2017-10-12T02:58:12.520Z</updated>
    
    <content type="html"><![CDATA[<p>​    居然花了半天时间搭建GitLab服务器，记得之前用自带的git建过服务器，几个人开发还能撑的过来，但是像公司这样几十个人同时开发的场景，就难以管理了。so，今天试了下GitLab的搭建。</p>
<blockquote>
<p>以下搭建环境：环境Centos 7</p>
</blockquote>
<h3 id="第一步：安装Git"><a href="#第一步：安装Git" class="headerlink" title="第一步：安装Git"></a>第一步：安装Git</h3><p>​    首先检查是否已经安装git</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">git --version</div><div class="line">git version 2.11.0 (Apple Git-81)</div><div class="line"></div><div class="line"><span class="comment"># 如果未安装</span></div><div class="line">sudo yum install git</div></pre></td></tr></table></figure>
<h3 id="第二步：安装依赖包"><a href="#第二步：安装依赖包" class="headerlink" title="第二步：安装依赖包"></a>第二步：安装依赖包</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 安装依赖</span></div><div class="line">sudo yum install curl openssh-server openssh-clients postfix cronie</div><div class="line"><span class="comment"># 启动邮件服务</span></div><div class="line">sudo service postfix start</div><div class="line"><span class="comment"># 检查 postfix</span></div><div class="line">sudo chkconfig postfix on</div></pre></td></tr></table></figure>
<h3 id="第三步：安装GitLab"><a href="#第三步：安装GitLab" class="headerlink" title="第三步：安装GitLab"></a>第三步：安装GitLab</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 添加国内镜像，新建/etc/yum.repos.d/gitlab-ce.repo 文件</span></div><div class="line">[gitlab-ce]</div><div class="line">name=gitlab-ce</div><div class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6</div><div class="line">repo_gpgcheck=0</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div><div class="line">gpgkey=https://packages.gitlab.com/gpg.key</div><div class="line"></div><div class="line"><span class="comment"># 安装GitLab</span></div><div class="line">sudo yum install gitlab-ce</div><div class="line"><span class="comment"># 或</span></div><div class="line">sudo yum install gitlab-ce-8.5.7-ce.0.el6.x86_64(指定GitLab版本)</div><div class="line"><span class="comment"># 应用gitlab.rb配置</span></div><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<h3 id="第四部：配置"><a href="#第四部：配置" class="headerlink" title="第四部：配置"></a>第四部：配置</h3><p>修改 vim /etc/gitlab/gitlab.rb 文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 如果需要用域名访问，请在hosts文件中做映射</span></div><div class="line">external_url <span class="string">'http://localhost:8800'</span></div><div class="line"></div><div class="line"><span class="comment"># unicorn 默认端口为8080，如果被占用就会报错502</span></div><div class="line">unicorn[<span class="string">'listen'</span>] = <span class="string">'127.0.0.1'</span></div><div class="line">unicorn[<span class="string">'port'</span>] = 8801</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 应用gitlab.rb配置</span></div><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<h3 id="第五步：汉化"><a href="#第五步：汉化" class="headerlink" title="第五步：汉化"></a>第五步：汉化</h3><ol>
<li><p>检查GitLab版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div></pre></td></tr></table></figure>
</li>
<li><p>克隆汉化包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://gitlab.com/larryli/gitlab.git</div></pre></td></tr></table></figure>
</li>
<li><p>比对汉化补丁</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 注意汉化补丁要和GitLab版本对应，否则无法正常工作</span></div><div class="line"><span class="built_in">cd</span> gitlab/</div><div class="line"><span class="comment"># 建议先切换到8-5-zh分支下git checkout 8-5-zh，再进行操作</span></div><div class="line">sudo git diff origin/8-5-stable  8-5-zh &gt; /tmp/8.5.diff</div></pre></td></tr></table></figure>
</li>
<li><p>应用汉化补丁</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 先停止GitLab</span></div><div class="line">sudo gitlab-ctl stop</div><div class="line"><span class="comment"># 应用汉化补丁</span></div><div class="line"><span class="built_in">cd</span> /opt/gitlab/embedded/service/gitlab-rails</div><div class="line">git apply /tmp/8.5.diff  </div><div class="line"><span class="comment"># 启动GitLab</span></div><div class="line">sudo gitlab-ctl reconfigure</div><div class="line">sudo gitlab-ctl start</div></pre></td></tr></table></figure>
</li>
</ol>
<p>默认管理员账号</p>
<blockquote>
<p>账号：root</p>
<p>密码： 5iveL!fe</p>
</blockquote>
<p>最后，在浏览器输入服务器ip地址，或者你做映射对应的域名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    居然花了半天时间搭建GitLab服务器，记得之前用自带的git建过服务器，几个人开发还能撑的过来，但是像公司这样几十个人同时开发的场景，就难以管理了。so，今天试了下GitLab的搭建。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下搭建环境：环境Centos 7&lt;
    
    </summary>
    
    
      <category term="GitLab" scheme="http://www.tipdev.xyz/tags/GitLab/"/>
    
      <category term="Git" scheme="http://www.tipdev.xyz/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Android玩转View（二）搞懂View的滑动原理</title>
    <link href="http://www.tipdev.xyz/2017/05/23/2017-05-23-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%BA%8C%EF%BC%89%E6%90%9E%E6%87%82View%E7%9A%84%E6%BB%91%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
    <id>http://www.tipdev.xyz/2017/05/23/2017-05-23-Android玩转View（二）搞懂View的滑动原理/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-05-23T16:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" target="_blank" rel="external">Android玩转View（一） 掌握View的基础知识</a><br><a href="http://tipdev.xyz/2017/05/23/2017-05-23-Android玩转View（二）搞懂View的滑动原理/" target="_blank" rel="external">Android玩转View（二） 搞懂View的滑动原理</a><br>Android玩转View（三） 搞懂View的弹性滑动<br>Android玩转View（四） 搞懂View的事件分发机制<br>Android玩转View（五） 搞懂View的工作原理（measure、layout和draw）<br>Android玩转View（六） Dome演示</p>
<h3 id="滑动原理"><a href="#滑动原理" class="headerlink" title="滑动原理"></a>滑动原理</h3><p>实质上是改变View的上下左右边距，或则给View增加动画，达到的平移过程。无论是多么绚丽的滑动，归根结底就是通过滑动再加上一些绚丽的特效组成的。</p>
<h3 id="滑动方式"><a href="#滑动方式" class="headerlink" title="滑动方式"></a>滑动方式</h3><ol>
<li><p>使用scrollTo/scrollBy<br>scrollBy内部实际上也是调用了scrollTo方法，他实现了基于当前View的相对滑动。<br>scrollTo实现了基于所传递参数的绝对滑动。<br>scrollTo/scrollBy只能改变View内容的位置而不能改变View在布局中的位置。</p>
<p>​</p>
</li>
<li><p>使用动画平移<br>使用动画来移动View，主要是操作View的translationX和translationY属性。</p>
<p>View动画：View 动画是对View的影响做操作，并不能真正的改变View 的位置参数，如果希望保存动画后的状态就需要将fillAfter设置true。<br>属性动画：属性动画不存在View动画的问题，但Android3.0一下不兼容。</p>
<p>​</p>
</li>
<li>LayoutParams改变布局参数<br>   改变LayoutParams里的margin值。比如向右平移100px，就设置marginLeft参数增加100px。向下平移100px，就设置marginTop参数增加100px。</li>
</ol>
<h3 id="滑动的区别"><a href="#滑动的区别" class="headerlink" title="滑动的区别"></a>滑动的区别</h3><ol>
<li>scrollTo/scrollBy<br>优点：专门用于View的滑动，实现方便，不影响内部元素的单击事件。适合对View内容的滑动。<br>缺点：只能滑动View的内容，不能滑动View本身。</li>
</ol>
<ol>
<li>动画<br>优点：操作简单，主要适用于没有交互的View和实现复杂的动画效果。<br>缺点：属性动画在Android3.0一下需要兼容库，不能改变View本身的属性。</li>
</ol>
<ol>
<li>改变布局参数<br>优点：适合有交互的View。<br>缺点：操作复杂</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%
    
    </summary>
    
    
      <category term="Android" scheme="http://www.tipdev.xyz/tags/Android/"/>
    
      <category term="View" scheme="http://www.tipdev.xyz/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android玩转View（一） 掌握View的基础知识</title>
    <link href="http://www.tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.tipdev.xyz/2017/05/22/2017-05-22-Android玩转View（一） 掌握View的基础知识/</id>
    <published>2017-05-21T16:00:00.000Z</published>
    <updated>2017-05-23T16:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" target="_blank" rel="external">Android玩转View（一） 掌握View的基础知识</a><br><a href="http://tipdev.xyz/2017/05/23/2017-05-23-Android玩转View（二）搞懂View的滑动原理/" target="_blank" rel="external">Android玩转View（二） 搞懂View的滑动原理</a><br>Android玩转View（三） 搞懂View的弹性滑动<br>Android玩转View（四） 搞懂View的事件分发机制<br>Android玩转View（五） 搞懂View的工作原理（measure、layout和draw）<br>Android玩转View（六） Dome演示</p>
<h3 id="什么是View"><a href="#什么是View" class="headerlink" title="什么是View"></a>什么是View</h3><p>   View是Android所有控件的基类，View是一种界面层的控件的抽象，它代表了一个控件。<br>   View可以是单个控件或者多个控件组成组成一个控件。 </p>
<h3 id="View的位置参数"><a href="#View的位置参数" class="headerlink" title="View的位置参数"></a>View的位置参数</h3><p>   View的位置由它的四个顶点坐标来决定，分别对应属性left、right、top、bottom<br><img src="http://wx4.sinaimg.cn/large/88b64bf6ly1ffukyg2697j211m0vqdij.jpg" alt="img"></p>
<ol>
<li><p>获取View的宽度和高度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">width = right - left</div><div class="line">height = bottom – top </div><div class="line">  </div><div class="line"> <span class="comment">// 获取方法</span></div><div class="line">right = getRight()</div><div class="line">left = getLeft()</div><div class="line">top = getTop()</div><div class="line">bottom =getBottom()</div></pre></td></tr></table></figure>
</li>
<li><p>其他</p>
<p>参数x，y，translationX，translationY，其中x、y表示View的左上角相对于父容器的坐标，translationX、translationY表示View左上角相对于父容器的偏移量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">x = left + translationX</div><div class="line">y = top +translationY</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h3 id="MotionEvent和TouchSlop"><a href="#MotionEvent和TouchSlop" class="headerlink" title="MotionEvent和TouchSlop"></a>MotionEvent和TouchSlop</h3><ol>
<li><p>MotionEvent</p>
<p>手指接触屏幕出发的一系列事件</p>
<ul>
<li>ACTION_DOWN          手指按下</li>
<li>ACTION_MOVE          手指移动</li>
<li>ACTION_UP            手指抬起</li>
</ul>
<p>获得点击事件的坐标点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">getX/getY              相对于当前View</div><div class="line">getRawX/getRawY        相对于手机屏幕</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>TouchSlop</p>
<p>系统能识别出来的最小滑动距离，意思就是滑动距离小于这个常量，系统就不认为你是在滑动。<br>获取最小滑动距离常量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">ViewConfiguration.get(getContext()).getScaledTouchSlop();</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h3 id="VelocityTracker、GestureDetector和Scroller"><a href="#VelocityTracker、GestureDetector和Scroller" class="headerlink" title="VelocityTracker、GestureDetector和Scroller"></a>VelocityTracker、GestureDetector和Scroller</h3><ol>
<li><p>Velocitytracker<br>速度追踪，用于计算手指滑动过程中的速度。<br>速度 = （终点位置 – 起点位置）／时间段</p>
</li>
<li><p>GestureDetector<br>手势检测，用于辅助检测用户的单机、滑动、长按、双击等行为。</p>
</li>
<li><p>Scroller<br>弹性滑动对象，用于实现View的弹性滑动。</p>
</li>
</ol>
<p>相关资料</p>
<ul>
<li><a href="http://item.jd.com/11760209.html" target="_blank" rel="external">Android 开发艺术探索</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%
    
    </summary>
    
    
      <category term="Android" scheme="http://www.tipdev.xyz/tags/Android/"/>
    
      <category term="View" scheme="http://www.tipdev.xyz/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>View 的事件（一）事件分发机制</title>
    <link href="http://www.tipdev.xyz/2017/05/12/2017-05-12-View%20%E7%9A%84%E4%BA%8B%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.tipdev.xyz/2017/05/12/2017-05-12-View 的事件（一）事件分发机制/</id>
    <published>2017-05-11T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一下View的事件分发机制，这也算是View的一个核心知识点，经常在面试过程中被问到。同样在开发过程中自定义View、解决事件冲突等，都需要掌握View的事件分发机制。</p>
<h3 id="View事件分发过程"><a href="#View事件分发过程" class="headerlink" title="View事件分发过程"></a>View事件分发过程</h3><ul>
<li>事件分发  dispatchTouchEvent</li>
<li>事件拦截 onInterceptTouchEvent</li>
<li>处理事件 onTouchEvent</li>
</ul>
<h3 id="事件传递流程"><a href="#事件传递流程" class="headerlink" title="事件传递流程"></a>事件传递流程</h3><p><img src="http://wx2.sinaimg.cn/mw690/88b64bf6ly1ffizxniqf2j219y1giwiz.jpg" alt="未标题-1"><br>当ViiewGroup接收到事件的时候，首先它的dispatchTouchEvent方法被触发，接着到ViewGroup的onInterceptTouchEvent方法中，如果返回true，就说明ViewGroup要拦截消费该事件，传递到ViewGroup的onTouchEvent方法中；如果返回的是false，就说明ViewGroup不拦截该事件，这样就传递到子View的dispatchTouchEvent方法中。</p>
<p>上述三个方法的传递过程，用如下伪代码表示非常好理解：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">diapatchTouchEvent</span><span class="params">(MotionEvent ev)</span></span>&#123;</div><div class="line">  <span class="keyword">boolean</span> consume = <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">if</span>(onInterceptTouchEvent(ev))&#123;</div><div class="line">    consume = onTouchEvent(ev);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    consume = child.dispatchTouchEvent(ev);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> consume;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：</p>
<ol>
<li><p>dispatchTouchEvent的返回值取决于onTouchEvent方法和子view的dispatchTouchEvent方法。​</p>
<p>比如：onInterceptTouchEvent到达的是当前View的onTouchEvent方法的时候，onTouchEvent没有消费事件，那么当前View的dispatchTouchEvent方法返回的就是false；反之到达的是子 View的dispatchTouchEvent方法，返回false，那么上级View的dispatchTouchEvent方法返回的也是false。</p>
</li>
<li><p>当View 的onTouchEvent方法，返回的是false时，它的父类的onTouchEvent方法就会被触发，以此类推，如果最后都没有处理该事件的话，会回到Activity onTouchEvent方法中。</p>
<p>比如：老板和项目经理说我们要开发一个淘宝—经理和项目负责人说做个淘宝— 项目负责人和开发人员说搞个淘宝出来— 开发人员搞了半天没搞出来，报告项目负责人说，做不出来— 项目负责人和经理说做不了这个— 经理报告老板说整个我们真做不了—最后老板只好，哦…</p>
</li>
</ol>
<p>相关资料</p>
<ul>
<li><a href="http://item.jd.com/11760209.html" target="_blank" rel="external">Android 开发艺术探索</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍一下View的事件分发机制，这也算是View的一个核心知识点，经常在面试过程中被问到。同样在开发过程中自定义View、解决事件冲突等，都需要掌握View的事件分发机制。&lt;/p&gt;
&lt;h3 id=&quot;View事件分发过程&quot;&gt;&lt;a href=&quot;#View事件分发过程&quot; cl
    
    </summary>
    
    
      <category term="Android" scheme="http://www.tipdev.xyz/tags/Android/"/>
    
      <category term="View" scheme="http://www.tipdev.xyz/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Gradle 部署到Tomcat</title>
    <link href="http://www.tipdev.xyz/2017/04/18/2017-04-18-Spring%20Boot%20Gradle%20%E9%83%A8%E7%BD%B2%E5%88%B0Tomcat/"/>
    <id>http://www.tipdev.xyz/2017/04/18/2017-04-18-Spring Boot Gradle 部署到Tomcat/</id>
    <published>2017-04-17T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Spring Boot ，自己搭的小型项目服务端开发的差不多了，，准备部署项目到服务器上跑一下，发现网上都是一些关于Maven的方法，提及到Gradle的也都讲的不太清楚，记录一下自己的心得。</p>
<h4 id="一、配置Application"><a href="#一、配置Application" class="headerlink" title="一、配置Application"></a>一、配置Application</h4><p>首先修改程序入口Application 中，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WkServerApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// run with war</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> application.sources(WkServerApplication.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// run with jar</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		SpringApplication.run(WkServerApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承SpringBootServletInitializer，并且覆写configure方法。</p>
<h4 id="二、配置build-gradle"><a href="#二、配置build-gradle" class="headerlink" title="二、配置build.gradle"></a>二、配置build.gradle</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">apply plugin: <span class="string">'war'</span>      <span class="comment">// 添加war插件</span></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">'org.springframework.boot'</span>  <span class="comment">// spring boot 插件</span></div><div class="line"></div><div class="line"><span class="comment">// 设置war包的名字，由baseName+version组成</span></div><div class="line">war &#123;</div><div class="line">	baseName = <span class="string">'WK-SERVER'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">	compile(<span class="string">"org.springframework.boot:spring-boot-starter-web"</span>)</div><div class="line">      </div><div class="line">    <span class="comment">// 添加provide tomcat，因为spring boot集成了tomcat，为了确保不受servlet干扰</span></div><div class="line">	providedRuntime <span class="string">'org.springframework.boot:spring-boot-starter-tomcat'</span></div><div class="line">      ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="三、生成War包"><a href="#三、生成War包" class="headerlink" title="三、生成War包"></a>三、生成War包</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">./gradlew war   <span class="comment">// 在项目的根目录执行，生成文件路径 /build/libs/wk.war</span></div></pre></td></tr></table></figure>
<p>或者 在IDEA中 工具栏Build-Build artifacts</p>
<h4 id="四、部署到Tomcat"><a href="#四、部署到Tomcat" class="headerlink" title="四、部署到Tomcat"></a>四、部署到Tomcat</h4><p>这里Tomcat的安装就不说了，我们把生成的war包 复制到 tomcat/webapp/下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">./startup.sh</div></pre></td></tr></table></figure>
<p>注意：要在原来url端口号后加上war包名，就像 <a href="http://127.0.0.1:8080/wk/news" target="_blank" rel="external">http://127.0.0.1:8080/wk/news</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习Spring Boot ，自己搭的小型项目服务端开发的差不多了，，准备部署项目到服务器上跑一下，发现网上都是一些关于Maven的方法，提及到Gradle的也都讲的不太清楚，记录一下自己的心得。&lt;/p&gt;
&lt;h4 id=&quot;一、配置Application&quot;&gt;&lt;a hre
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://www.tipdev.xyz/tags/Spring-Boot/"/>
    
      <category term="Gradle" scheme="http://www.tipdev.xyz/tags/Gradle/"/>
    
      <category term="Tomcat" scheme="http://www.tipdev.xyz/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>JAVA错误 No default constructor for entity ...</title>
    <link href="http://www.tipdev.xyz/2017/04/17/2017-04-17-JAVA%E9%94%99%E8%AF%AF%20No%20default%20constructor%20for%20entity/"/>
    <id>http://www.tipdev.xyz/2017/04/17/2017-04-17-JAVA错误 No default constructor for entity/</id>
    <published>2017-04-16T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在使用JPA的时候，发现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">org.hibernate.InstantiationException: No default constructor for entity:  : com.cz1.domain.Image</div></pre></td></tr></table></figure>
<p>原因:缺少无参构造，Hibernate必须要使用Java反射机制来实例化对象。</p>
<p>解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Image</span><span class="params">()</span></span>&#123;&#125;   <span class="comment">// 加上无参构造</span></div></pre></td></tr></table></figure>
<p>解决了，记录一下！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在使用JPA的时候，发现以下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;org.hibernate.InstantiationExc
    
    </summary>
    
    
      <category term="Java" scheme="http://www.tipdev.xyz/tags/Java/"/>
    
      <category term="Hibernate" scheme="http://www.tipdev.xyz/tags/Hibernate/"/>
    
      <category term="JPA" scheme="http://www.tipdev.xyz/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>如何模拟json数据</title>
    <link href="http://www.tipdev.xyz/2017/03/01/2017-03-01-%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9Fjson%E6%95%B0%E6%8D%AE/"/>
    <id>http://www.tipdev.xyz/2017/03/01/2017-03-01-如何模拟json数据/</id>
    <published>2017-02-28T16:00:00.000Z</published>
    <updated>2017-11-07T03:37:00.273Z</updated>
    
    <content type="html"><![CDATA[<p>最近新项目，后台人手不够，招了一个星期，才招到人，但人再厉害也需要时间先去熟悉项目吧。这样我们移动端或者前端的就被牵着鼻子走，然后项目进度跟不上就甩锅给后端，“接口那边太慢，导致我这进度也受到影响”等等。</p>
<h3 id="一、Charles-拦截"><a href="#一、Charles-拦截" class="headerlink" title="一、Charles 拦截"></a>一、Charles 拦截</h3><ol>
<li><p>下载<a href="https://www.charlesproxy.com/download/" target="_blank" rel="external">Charles</a> </p>
</li>
<li><p>通过<a href="http://www.mocky.io" target="_blank" rel="external">mocky</a> 模拟json数据，最后会生成一个对应的url</p>
</li>
<li><p>设置Mac代理</p>
<p><img src="http://wx1.sinaimg.cn/mw690/88b64bf6gy1fd7kaaqtx3j215m0kk0zi.jpg" alt="img"></p>
</li>
</ol>
<p>   开启Mac 代理</p>
<p>   <img src="http://wx1.sinaimg.cn/mw690/88b64bf6gy1fd7kbrt2kkj215o0kktce.jpg" alt="img"></p>
<ol>
<li><p>安装证书</p>
<p><img src="http://wx1.sinaimg.cn/mw690/88b64bf6gy1fd7ked6xc0j215o0ib150.jpg" alt="img"></p>
<p>安装向导</p>
<p><img src="http://wx2.sinaimg.cn/mw690/88b64bf6gy1fd7kpj9rd4j215o0mfjvh.jpg" alt="img"></p>
</li>
</ol>
<p>​      接着就是手机安装证书</p>
<p>​          <img src="http://wx4.sinaimg.cn/mw690/88b64bf6gy1fd7lec3dgxj20a00hs3zw.jpg" alt="img"> <img src="http://wx4.sinaimg.cn/mw690/88b64bf6gy1fd7lecgozpj20a00hsmxv.jpg" alt="img"></p>
<p>​         最后设置拦截的url 到你模拟的mock url</p>
<p><img src="http://wx4.sinaimg.cn/mw690/88b64bf6gy1fd7lkgmx6gj215o0s47k7.jpg" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近新项目，后台人手不够，招了一个星期，才招到人，但人再厉害也需要时间先去熟悉项目吧。这样我们移动端或者前端的就被牵着鼻子走，然后项目进度跟不上就甩锅给后端，“接口那边太慢，导致我这进度也受到影响”等等。&lt;/p&gt;
&lt;h3 id=&quot;一、Charles-拦截&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="android" scheme="http://www.tipdev.xyz/tags/android/"/>
    
  </entry>
  
</feed>
