<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wkchen&#39;s blog</title>
  <subtitle>学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tipdev.xyz/"/>
  <updated>2018-02-01T02:58:58.199Z</updated>
  <id>http://www.tipdev.xyz/</id>
  
  <author>
    <name>wkchen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决Mac 下 Terminal 使用 Shadowsocks 科学上网</title>
    <link href="http://www.tipdev.xyz/2018/02/01/2018-02-01-%E8%A7%A3%E5%86%B3Mac%20%E4%B8%8B%20Terminal%20%E4%BD%BF%E7%94%A8%20Shadowsocks%20%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://www.tipdev.xyz/2018/02/01/2018-02-01-解决Mac 下 Terminal 使用 Shadowsocks 科学上网/</id>
    <published>2018-01-31T16:00:00.000Z</published>
    <updated>2018-02-01T02:58:58.199Z</updated>
    
    <content type="html"><![CDATA[<p>最近在安装 vim-go 和 golang 依赖的过程中遇到了一些  “墙” 的问题。众所周知在 Terminal 中是不走Sock5 代理的，那么怎么才能在 Terminal 中科学上网呢？</p>
<p>首先你得有 Shadowsocks 账号，这里就不赘述了，网上教程很多。</p>
<h4 id="安装-polipo-工具"><a href="#安装-polipo-工具" class="headerlink" title="安装 polipo 工具"></a>安装 polipo 工具</h4><p>polipo 是一个简单的web代理工具，具体介绍👉 <a href="https://wiki.archlinux.org/index.php/Polipo_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="external">polipo</a>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">brew install polipo</div></pre></td></tr></table></figure>
<h4 id="设置-Sock-代理"><a href="#设置-Sock-代理" class="headerlink" title="设置 Sock 代理"></a>设置 Sock 代理</h4><p>编辑 homebrew.mxcl.polipo.plist</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /usr/local/opt/polipo/homebrew.mxcl.polipo.plist</div></pre></td></tr></table></figure>
<p>修改如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class="line"> &lt;plist version=&quot;1.0&quot;&gt;</div><div class="line">   &lt;dict&gt;</div><div class="line">     &lt;key&gt;Label&lt;/key&gt;</div><div class="line">     &lt;string&gt;homebrew.mxcl.polipo&lt;/string&gt;</div><div class="line">     &lt;key&gt;RunAtLoad&lt;/key&gt;</div><div class="line">     &lt;true/&gt;</div><div class="line">     &lt;key&gt;KeepAlive&lt;/key&gt;</div><div class="line">     &lt;true/&gt;</div><div class="line">     &lt;key&gt;ProgramArguments&lt;/key&gt;</div><div class="line">     &lt;array&gt;</div><div class="line">       &lt;string&gt;/usr/local/opt/polipo/bin/polipo&lt;/string&gt;</div><div class="line">       &lt;string&gt;socksParentProxy=localhost:1080&lt;/string&gt;</div><div class="line">     &lt;/array&gt;</div><div class="line">     &lt;!-- Set `ulimit -n 65536`. The default macOS limit is 256, that&apos;s</div><div class="line">          not enough for Polipo (displays &apos;too many files open&apos; errors).</div><div class="line">          It seems like you have no reason to lower this limit</div><div class="line">          (and unlikely will want to raise it). --&gt;</div><div class="line">     &lt;key&gt;SoftResourceLimits&lt;/key&gt;</div><div class="line">     &lt;dict&gt;</div><div class="line">       &lt;key&gt;NumberOfFiles&lt;/key&gt;</div><div class="line">       &lt;integer&gt;65536&lt;/integer&gt;</div><div class="line">     &lt;/dict&gt;</div><div class="line">   &lt;/dict&gt;</div><div class="line"> &lt;/plist&gt;</div></pre></td></tr></table></figure>
<h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><p>开启 polipo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln -sfv /usr/local/opt/polipo/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist</div></pre></td></tr></table></figure>
<p>关闭 polipo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.polipo.plist</div></pre></td></tr></table></figure>
<h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><p>在 ~/.bash_profile 或者 ~/.bashrc 添加一下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">alias proxy=&quot;export http_proxy=http://localhost:8123;export https_proxy=http://localhost:8123&quot;  # 开启</div><div class="line">alias unproxy=&quot;unset http_proxy&quot;  # 关闭</div></pre></td></tr></table></figure>
<p>如果你和我一样安装了 oh-my-zsh 请在 ~/.zshrc 中添加以上代码。</p>
<p>保存配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">source 环境变量配置文件  # 比如 source .zshrc</div></pre></td></tr></table></figure>
<h4 id="开启代理"><a href="#开启代理" class="headerlink" title="开启代理"></a>开启代理</h4><p>在终端中 执行 proxy 开启代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">proxy</div></pre></td></tr></table></figure>
<p>使用 curl 进行测试 curl cip.cc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">IP	: 35.194.198.57</div><div class="line">地址	: 美国  艾奥瓦州  Cloud</div><div class="line"></div><div class="line">数据二	: 美国 | Merit网络公司</div><div class="line"></div><div class="line">URL	: http://www.cip.cc/35.194.198.57</div></pre></td></tr></table></figure>
<p>执行 unproxy 关闭代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">unproxy</div></pre></td></tr></table></figure>
<p>使用 curl 进行测试 curl cip.cc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">IP	: 125.121.15.42</div><div class="line">地址	: 中国  浙江  杭州</div><div class="line"></div><div class="line">数据二	: 浙江省杭州市 | 电信</div><div class="line"></div><div class="line">URL	: http://www.cip.cc/125.121.15.42</div></pre></td></tr></table></figure>
<p>这样就可以在 Terminal 中愉快的科学上网了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在安装 vim-go 和 golang 依赖的过程中遇到了一些  “墙” 的问题。众所周知在 Terminal 中是不走Sock5 代理的，那么怎么才能在 Terminal 中科学上网呢？&lt;/p&gt;
&lt;p&gt;首先你得有 Shadowsocks 账号，这里就不赘述了，网上教程
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos 7 下搭建 LAMP 服务·及 HTTPS</title>
    <link href="http://www.tipdev.xyz/2017/11/14/2017-11-14-Centos%207%20%E4%B8%8B%E6%90%AD%E5%BB%BA%20LAMP%20%E6%9C%8D%E5%8A%A1%C2%B7%E5%8F%8A%20HTTPS/"/>
    <id>http://www.tipdev.xyz/2017/11/14/2017-11-14-Centos 7 下搭建 LAMP 服务·及 HTTPS/</id>
    <published>2017-11-13T16:00:00.000Z</published>
    <updated>2017-11-14T08:46:44.530Z</updated>
    
    <content type="html"><![CDATA[<p>LAMP 是指一组通常一起使用来运行动态网页或者服务器的自由软件名称缩写：</p>
<ul>
<li>Linux</li>
<li>Apache</li>
<li>MySQL 或者 MariaDB</li>
<li>PHP、Per 或者 Python</li>
</ul>
<p>接下来就讲讲我最近搭建这些服务的心得吧，虽然网上有很多 LAMP 的一键安装包，但这样就没有动手实践的意义了。</p>
<h4 id="一、Apache服务搭建"><a href="#一、Apache服务搭建" class="headerlink" title="一、Apache服务搭建"></a>一、Apache服务搭建</h4><p>​早在2013就开始接触到了 Apache，我记得当时还是在 <a href="https://zh.wikipedia.org/wiki/Fedora" target="_blank" rel="external">Fedora</a> 环境下使用的，不过比起当时，现在已经对 Apache 的认识更加深入了。</p>
<p>Step1.安装 httpd</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum install -y httpd</div></pre></td></tr></table></figure>
<p>Step2.配置 httpd.conf</p>
<p>​    关于 apache 的配置，全部可以在这个文件夹中配置，包括绑定域名、监听端口、项目目录、apache 模块等等，都可以在这里设置。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 设置监听端口</span></div><div class="line">Listen 80</div><div class="line"><span class="comment"># 项目目录</span></div><div class="line">DocumentRoot <span class="string">"/var/www/html"</span></div></pre></td></tr></table></figure>
<h4 id="二、开启-HTTPS-服务"><a href="#二、开启-HTTPS-服务" class="headerlink" title="二、开启 HTTPS 服务"></a>二、开启 HTTPS 服务</h4><p>HTTPS 又称超文本传输安全协议，是一种通过计算机网络进行安全通信的传输协议，HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>
<h5 id="自签名证书安装"><a href="#自签名证书安装" class="headerlink" title="# 自签名证书安装"></a># 自签名证书安装</h5><p>Step1.安装 apache ssl 模块和 openssl</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum install mod_ssl openssl</div></pre></td></tr></table></figure>
<p>Step2.生成 2048 签名文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl genrsa -out server.key 2048</div></pre></td></tr></table></figure>
<p>Step3.对证书进行签名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl req -new -key server.key -out server.csr</div></pre></td></tr></table></figure>
<p>Step4.生成 X509 的自签名证书，有效期 3650 天</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt</div></pre></td></tr></table></figure>
<p>Step5.复制签名文件到 /etc/pki/tls 对应目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">cp server.crt /etc/pki/tls/certs/</div><div class="line">cp server.key /etc/pki/tls/private/        </div><div class="line">cp server.csr /etc/pki/tls/private/</div></pre></td></tr></table></figure>
<p>Step6.修改 ssl.conf 配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /etc/httpd/conf.d/ssl.conf 修改一下内容</span></div><div class="line">&lt;VirtualHost _default_:443&gt;</div><div class="line">	DocumentRoot <span class="string">"/var/www/html"</span></div><div class="line">	ServerName xxx.xxx.com:443</div><div class="line">	SSLEngine on</div><div class="line">	SSLCertificateFile /etc/pki/tls/certs/server.crt</div><div class="line">	SSLCertificateKeyFile /etc/pki/tls/private/server.key</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
<p>Step7.重启 Apache</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 注意 记得开启443端口，如果已经开启，请忽略</span></div><div class="line">sudo iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT</div><div class="line"><span class="comment"># 查看端口情况</span></div><div class="line">netstat -ntl</div><div class="line"><span class="comment"># 重启 apache</span></div><div class="line">systemctl restart httpd</div></pre></td></tr></table></figure>
<p>此时，在浏览器打开你在 Step6 设置的域名，例如：<a href="https://xxx.xxx.com" target="_blank" rel="external">https://xxx.xxx.com</a> 就能访问 https 网站了。</p>
<p>注意：显示不安全属于正常情况，如果你不希望看到不安全，你可以使用下面这种方式。</p>
<h5 id="免费-收费-SLL-证书"><a href="#免费-收费-SLL-证书" class="headerlink" title="#免费/收费 SLL 证书"></a>#免费/收费 SLL 证书</h5><p>SSL 证书分为以下几种：</p>
<ul>
<li><p>域名验证型 DV        一般用于个人网站</p>
</li>
<li><p>组织验证型 OV        中小型企业</p>
</li>
<li><p>扩展验证型 EV         大型企业</p>
</li>
</ul>
<p>免费的 DV 提供商有很多，这里我使用的是 Let’s Encrypt ，缺点就是需要每隔三个月续期一次。后两者一般都是收费的。</p>
<p>Setp1.下载letsencrypt</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/letsencrypt/letsencrypt</div><div class="line"><span class="built_in">cd</span> letsencrypt</div></pre></td></tr></table></figure>
<p>Step2.安装证书</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 注意先暂停 httpd</span></div><div class="line">systemctl stop httpd</div><div class="line"><span class="comment"># 执行以下命令，接着按照提示一步步进行</span></div><div class="line">./letsencrypt-auto certonly  --email xxx@email.com <span class="_">-d</span> xxx.xxx.com</div></pre></td></tr></table></figure>
<p>在执行完成后，当你看到 Congratulations! 并且在 /etc/letsencrypt 目录下生成一个 live 文件夹的时候说明安装成功了。</p>
<p>Step3.修改 ssl.conf 配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /etc/httpd/conf.d/ssl.conf </span></div><div class="line">SSLCertificateFile /etc/letsencrypt/live/xxx.xxx.com/fullchain.pem</div><div class="line">SSLCertificateKeyFile /etc/letsencrypt/live/xxx.xxx.com/privkey.pem</div></pre></td></tr></table></figure>
<p>Step4.强制跳转 https</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># vim /etc/httpd/conf/httpd.conf ,在 &lt;Directory&gt; 中添加</span></div><div class="line">RewriteEngine on</div><div class="line">RewriteCond %&#123;SERVER_PORT&#125; !^443$</div><div class="line">RewriteRule ^(.*)?$ https://%&#123;SERVER_NAME&#125;/ [L,R]</div></pre></td></tr></table></figure>
<p>Step5.重启 Apache</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">systmectl restart httpd</div></pre></td></tr></table></figure>
<p>打开浏览器，看看成果吧。</p>
<h4 id="三、安装-MySQL"><a href="#三、安装-MySQL" class="headerlink" title="三、安装 MySQL"></a>三、安装 MySQL</h4><p>Step1.安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum -y install mysql mysql-server</div></pre></td></tr></table></figure>
<p>Step2.启动 MySQL</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">systemctl start mysql</div></pre></td></tr></table></figure>
<p>Step3.登录 MySQL</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 登录 mysql</span></div><div class="line">mysql -u root -p</div><div class="line">use mysql;</div><div class="line"><span class="comment"># 重置 root 密码</span></div><div class="line">grant usage on *.* to <span class="string">'root'</span> identified by <span class="string">'password'</span>;</div><div class="line"><span class="comment"># 保存设置</span></div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
<h4 id="四、安装-php"><a href="#四、安装-php" class="headerlink" title="四、安装 php"></a>四、安装 php</h4><p>Step1.安装 epel-release 扩展 yum 软件源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum install epel-release</div><div class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</div></pre></td></tr></table></figure>
<p>Step2.安装 php7.0</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">yum install php70w</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LAMP 是指一组通常一起使用来运行动态网页或者服务器的自由软件名称缩写：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Apache&lt;/li&gt;
&lt;li&gt;MySQL 或者 MariaDB&lt;/li&gt;
&lt;li&gt;PHP、Per 或者 Python&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Let&#39;s 炫酷终端</title>
    <link href="http://www.tipdev.xyz/2017/11/07/2017-11-07-Let&#39;s%20%E7%82%AB%E9%85%B7%E7%BB%88%E7%AB%AF/"/>
    <id>http://www.tipdev.xyz/2017/11/07/2017-11-07-Let&#39;s 炫酷终端/</id>
    <published>2017-11-06T16:00:00.000Z</published>
    <updated>2017-11-07T03:50:49.719Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>炫酷的终端iTerm2</p>
</li>
<li><p>我的Vim</p>
<p>​</p>
</li>
</ul>
<h4 id="一、炫酷的终端iTerm2-oh-my-zsh"><a href="#一、炫酷的终端iTerm2-oh-my-zsh" class="headerlink" title="一、炫酷的终端iTerm2+oh my zsh"></a>一、炫酷的终端iTerm2+oh my zsh</h4><p>话不多说，先上效果图：</p>
<p><img src="/images/let&#39;s_iterm2/let&#39;s_iterm2_1.png" alt="let&#39;s_iterm2_1"></p>
<ol>
<li>实现以上效果，你需要先安装iTerm2，<a href="https://www.iterm2.com/downloads.html" target="_blank" rel="external">传送门</a></li>
<li>接着我们安装oh my zsh设置终端的主题， 什么是oh my zsh呢? <a href="http://ohmyz.sh/" target="_blank" rel="external">传送门</a></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 安装oh my zsh</span></div><div class="line">$ sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<p>到这里，能看到大致上已经完成了效果图的90%效果。</p>
<ol>
<li><p>开启iTerm2的Hotkey 功能，在使用的过程中让我屡试不爽的功能就是Hotkey功能，怎么开启呢？菜单栏iTerm2—&gt;Preferences—&gt;选择Keys标签—&gt; 勾选Hotkey 下的Show/hide all windows with a system-wide hotkey—&gt;Create a Dedicated Hotkey Window。然后切换到Profiles标签，就会发现在Profile Name下多了一个Hotkey Window</p>
</li>
<li><p>设置iTerm2配色</p>
<p>我这是用的是一个第三方的配色主题space-vim-dark，你也可以选择自己喜欢的主题来使用。</p>
</li>
</ol>
<h4 id="二、我的Vim配置"><a href="#二、我的Vim配置" class="headerlink" title="二、我的Vim配置"></a>二、我的Vim配置</h4><p>老规矩，先上效果图：事先说明下我使用Vim主要用来写Python</p>
<p><img src="/images/let&#39;s_iterm2/let&#39;s_iterm2_2.png" alt="let&#39;s_iterm2_1"></p>
<ol>
<li><p>安装插件管理器Vundle</p>
<p>首先下载Vundle源码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure>
<p>在vim ~/.vimrc 中添加如下代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="built_in">set</span> nocompatible</div><div class="line">filetype off</div><div class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle<span class="comment">#begin()</span></div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line">call vundle<span class="comment">#end()</span></div><div class="line">filetype plugin indent on</div></pre></td></tr></table></figure>
</li>
<li><p>安装代码提示YouCompleteMe插件</p>
<p>在 vim ~/.vimrc 文件中添加如下代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">call vundle<span class="comment">#begin()</span></div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line"><span class="comment"># 添加</span></div><div class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></div><div class="line">call vundle<span class="comment">#end()</span></div></pre></td></tr></table></figure>
<p>执行:PluginInstall  这个过程可能会比较漫长</p>
</li>
<li><p>安装语法检查插件ale</p>
<p>同样的在 vim ~/.vimrc 文件中添加如下代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">call vundle<span class="comment">#begin()</span></div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></div><div class="line"><span class="comment"># 添加</span></div><div class="line">Plugin <span class="string">'w0rp/ale'</span></div><div class="line">call vundle<span class="comment">#end()</span></div></pre></td></tr></table></figure>
<p>执行:PluginInstall ，此时你只需要等待，直到控制器打出done! 即可</p>
</li>
<li><p>安装python语法检查工具flake8</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">sudo pip install flake8</div></pre></td></tr></table></figure>
<p>ale支持一下语言（具体安装方法请查看<a href="https://github.com/w0rp/ale#supported-languages" target="_blank" rel="external">ale repo</a>  <strong>Languages and Tools</strong>）</p>
<p><img src="/images/let&#39;s_iterm2/let&#39;s_iterm2_3.png" alt="let&#39;s_iterm2_1"></p>
</li>
</ol>
<p>最后贴出我的.vimrc 配置文件:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="built_in">set</span> nocompatible</div><div class="line">filetype off</div><div class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle<span class="comment">#begin()</span></div><div class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></div><div class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></div><div class="line">Plugin <span class="string">'w0rp/ale'</span></div><div class="line">call vundle<span class="comment">#end()</span></div><div class="line">filetype plugin indent on</div><div class="line"></div><div class="line"></div><div class="line"><span class="string">" 语法高亮</span></div><div class="line"><span class="string">syntax on</span></div><div class="line"><span class="string">"</span> 用浅色高亮当前行</div><div class="line">autocmd InsertLeave * se nocul</div><div class="line">autocmd InsertEnter * se cul</div><div class="line"><span class="string">" 智能对齐</span></div><div class="line"><span class="string">set smartindent</span></div><div class="line"><span class="string">"</span> 自动对齐</div><div class="line"><span class="built_in">set</span> autoindent</div><div class="line"><span class="string">" tab键的宽度</span></div><div class="line"><span class="string">set tabstop=4</span></div><div class="line"><span class="string">"</span> 统一缩进为4</div><div class="line"><span class="built_in">set</span> softtabstop=4</div><div class="line"><span class="string">" 显示行号</span></div><div class="line"><span class="string">set number</span></div><div class="line"><span class="string">"</span> 历史记录数</div><div class="line"><span class="built_in">set</span> clipboard+=unnamed</div><div class="line"><span class="built_in">set</span> <span class="built_in">history</span>=50</div><div class="line"><span class="string">" 自动匹配括号</span></div><div class="line"><span class="string">inoremap ( ()&lt;LEFT&gt;</span></div><div class="line"><span class="string">inoremap [ []&lt;LEFT&gt;</span></div><div class="line"><span class="string">inoremap &#123; &#123;&#125;&lt;LEFT&gt;</span></div><div class="line"><span class="string">"</span> 关闭ycm的方法previw窗口</div><div class="line"><span class="built_in">set</span> completeopt-=preview</div><div class="line"><span class="string">" 设置主题</span></div><div class="line"><span class="string">colorscheme space-vim-dark</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"</span> ale配置</div><div class="line"><span class="string">" 显示侧边栏</span></div><div class="line"><span class="string">let g:ale_sign_column_always = 1</span></div><div class="line"><span class="string">let g:ale_set_highlights = 0</span></div><div class="line"><span class="string">"</span> 自定义图标</div><div class="line"><span class="built_in">let</span> g:ale_sign_error = <span class="string">'✗'</span></div><div class="line"><span class="built_in">let</span> g:ale_sign_warning = <span class="string">'⚡'</span></div><div class="line"><span class="string">"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告</span></div><div class="line"><span class="string">nmap sp &lt;Plug&gt;(ale_previous_wrap)</span></div><div class="line"><span class="string">nmap sn &lt;Plug&gt;(ale_next_wrap)</span></div><div class="line"><span class="string">"</span>&lt;Leader&gt;s触发/关闭语法检查</div><div class="line">nmap &lt;Leader&gt;s :ALEToggle&lt;CR&gt;</div><div class="line"><span class="string">"&lt;Leader&gt;d查看错误或警告的详细信息</span></div><div class="line"><span class="string">nmap &lt;Leader&gt;d :ALEDetail&lt;CR&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;炫酷的终端iTerm2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我的Vim&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;一、炫酷的终端iTerm2-oh-my-zsh&quot;&gt;&lt;a href=&quot;#一、炫酷的终端iTerm2-oh-my-zsh&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Use Dagger2.11 in MVP</title>
    <link href="http://www.tipdev.xyz/2017/08/24/2017-08-24-Use%20Dagger2.11%20in%20MVP/"/>
    <id>http://www.tipdev.xyz/2017/08/24/2017-08-24-Use Dagger2.11 in MVP/</id>
    <published>2017-08-23T16:00:00.000Z</published>
    <updated>2017-11-07T03:21:53.415Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在学习Google最新发布的架构<a href="https://developer.android.com/topic/libraries/architecture/index.html" target="_blank" rel="external">Android Architecture Components</a> 的时候时，使用到了Dagger2，一直以来对Dagger的使用都不怎么熟练。于是这次花了点时间学习了一下，一下是我对Dagger最新2.11版本的使用记录。</p>
<p>在这之前需要先了解</p>
<p>​    什么是依赖注入（Dependent injection）？</p>
<p>​    依赖注入的实现方式</p>
<p>​    依赖注入的好处</p>
<p>​    Dagger的知识要点</p>
<h3 id="1-依赖注入（DI）"><a href="#1-依赖注入（DI）" class="headerlink" title="1.依赖注入（DI）"></a>1.依赖注入（DI）</h3><p>​    当某个角色(可能<strong>是</strong>一个Java实例，调用者)需要另一个角色(另一个Java实例，被调用者)的协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。可以简单的理解为：一般情况下A类 依赖于 B类时，我们在A类中new 出一个实例，而依赖注入表示从外部创建好B类实例，直接传递给A类。</p>
<h3 id="2-注入方式"><a href="#2-注入方式" class="headerlink" title="2.注入方式"></a>2.注入方式</h3><p>依赖注入的实现方式：</p>
<ul>
<li><p>基于接口</p>
</li>
<li><p>基于set方法</p>
</li>
<li><p>基于构造函数</p>
</li>
<li><p>基于注解（Dagger2就是使用这种方式注入的@Inject）</p>
<p>​</p>
</li>
</ul>
<h3 id="3-依赖注入的好处"><a href="#3-依赖注入的好处" class="headerlink" title="3.依赖注入的好处"></a>3.依赖注入的好处</h3><p>​    两个字：解耦</p>
<h3 id="4-Dagger的知识要点"><a href="#4-Dagger的知识要点" class="headerlink" title="4.Dagger的知识要点"></a>4.Dagger的知识要点</h3><p>​    @Comonent  用来将@Inject 和@Module联系起来的桥梁，在@Module中获取依赖并且注入到@Inject</p>
<p>​    @Inject           Dagger2会实例化带有此注解的类</p>
<p>​    @Module       用于提供依赖</p>
<p>​        @Provide      </p>
<p>​        @Singleton   </p>
<p>​    @ContributesAndroidInjector（2.11新增）  用来生成对应的 Subcomponent</p>
<p>​    @Binds</p>
<h3 id="5-Dagger使用"><a href="#5-Dagger使用" class="headerlink" title="5.Dagger使用"></a>5.Dagger使用</h3><p>​    首先在build.gradle中添加如下dagger相关依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">annotationProcessor <span class="string">'com.google.dagger:dagger-compiler:2.11'</span></div><div class="line">annotationProcessor <span class="string">'com.google.dagger:dagger-android-processor:2.11'</span></div><div class="line">implementation <span class="string">'com.google.dagger:dagger:2.11'</span></div><div class="line">implementation <span class="string">'com.google.dagger:dagger-android:2.11'</span></div><div class="line">implementation <span class="string">'com.google.dagger:dagger-android-support:2.11'</span></div></pre></td></tr></table></figure>
<p>​    在Application 中实现HasActivityInjector</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">HasActivityInjector</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingAndroidInjector;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        DaggerAppComontent.builder()</div><div class="line">            .application(<span class="keyword">this</span>)</div><div class="line">            .build()</div><div class="line">            .inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Activity&gt; <span class="title">activityInjector</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dispatchingAndroidInjector;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    在Activity中实现HasFragmentInjector</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GankActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">HasFragmentInjector</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    DispatchingAndroidInjector&lt;Fragment&gt; dispatchingAndroidInjector;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        AndroidInjection.inject(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_gank);</div><div class="line"></div><div class="line">        getFragmentManager().beginTransaction()</div><div class="line">            .add(R.id.fragment, <span class="keyword">new</span> GankFragment())</div><div class="line">            .commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> AndroidInjector&lt;Fragment&gt; <span class="title">fragmentInjector</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dispatchingAndroidInjector;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    创建NetworkModule</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkModule</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/*okhttp logging*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HttpLoggingInterceptor <span class="title">provideHttpLogginInterceptor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*okhttp http header expample:Content-Type*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HeaderInterceptor <span class="title">provideHeaderInterception</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeaderInterceptor();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*okhttp config*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">provideOkHttpClient</span><span class="params">(HeaderInterceptor headerInterceptor, HttpLoggingInterceptor loggingInterceptor)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">            .connectTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</div><div class="line">            .addInterceptor(headerInterceptor)</div><div class="line">            .addInterceptor(loggingInterceptor)</div><div class="line">            .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*retrofit gson*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="keyword">public</span> Converter.<span class="function">Factory <span class="title">provideConverterFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> GsonConverterFactory.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*retrofit rxjava2*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="keyword">public</span> CallAdapter.<span class="function">Factory <span class="title">provideCallAdapterFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> RxJava2CallAdapterFactory.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*retrofit config*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Retrofit <span class="title">provideRetrofit</span><span class="params">(Converter.Factory converterFactory,</span></span></div><div class="line"><span class="function"><span class="params">                                    CallAdapter.Factory callAdapterFactory, OkHttpClient client)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">            .baseUrl(<span class="string">"http://gank.io/api/"</span>)</div><div class="line">            .addConverterFactory(converterFactory)</div><div class="line">            .addCallAdapterFactory(callAdapterFactory)</div><div class="line">            .client(client)</div><div class="line">            .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/*retrofit service*/</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function"><span class="keyword">public</span> GankService <span class="title">provideGankService</span><span class="params">(Retrofit retrofit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(GankService.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    创建全局AppModule</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Module</span>(includes = &#123;</div><div class="line">    NetworkModule.class&#125;</div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">Context <span class="title">provideContext</span><span class="params">(App app)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> app;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="function">CompositeDisposable <span class="title">provideCompositeDisposable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeDisposable();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    创建统一管理依赖于AppComponent的Module添加的中间件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ContributesAndroidInjector</span>(modules = GankFragmentModule.class)</div><div class="line">    <span class="function"><span class="keyword">abstract</span> GankActivity <span class="title">contributeGankActivity</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GankFragmentModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ContributesAndroidInjector</span></div><div class="line">    <span class="function"><span class="keyword">abstract</span> GankFragment <span class="title">contributeGankFragment</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Binds</span></div><div class="line">    <span class="keyword">abstract</span> GankContract.<span class="function">GankPresenter <span class="title">bindsPresenter</span><span class="params">(GankPresenter presenter)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​    最后创建AppComontent</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;</div><div class="line">    AndroidSupportInjectionModule.class,</div><div class="line">    AppModule.class,</div><div class="line">    ActivityModule.class</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppComontent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Component</span>.Builder</div><div class="line">    <span class="class"><span class="keyword">interface</span>  <span class="title">Builder</span></span>&#123;</div><div class="line">        <span class="meta">@BindsInstance</span></div><div class="line">        <span class="function">Builder <span class="title">application</span><span class="params">(App app)</span></span>;</div><div class="line">        <span class="function">AppComontent <span class="title">build</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(App app)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间在学习Google最新发布的架构&lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Androi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>服务端与客户端敏感数据通信的最佳实践</title>
    <link href="http://www.tipdev.xyz/2017/06/22/2017-06-22-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://www.tipdev.xyz/2017/06/22/2017-06-22-服务端与客户端敏感数据通信的最佳实践/</id>
    <published>2017-06-21T16:00:00.000Z</published>
    <updated>2017-06-22T15:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对称加密方式（例如AES）"><a href="#对称加密方式（例如AES）" class="headerlink" title="对称加密方式（例如AES）"></a>对称加密方式（例如AES）</h3><p>对称加密方式通过密码（secret key）对敏感数据进行加密，比如考虑到用户登录时账号以及密码不利于暴露出来，可以通过对称加密的方式传递，客户端把敏感数据进行加密后发送给服务端，服务端使用相同的密码进行解密，这样即使在数据传输的时候被拦截了发送的数据，也不会完全的暴露出来，所以它不知道密码就无法进行解密数据。</p>
<p>当然这种加密方式存在最致命的缺点，一旦密码（secret key）被暴露就相当于把敏感数据直接公布出来了。</p>
<h3 id="非对称加密（例如：RSA）"><a href="#非对称加密（例如：RSA）" class="headerlink" title="非对称加密（例如：RSA）"></a>非对称加密（例如：RSA）</h3><p>非对称加密是生成一个私钥和一个公钥，公钥用于对敏感数据加密，私钥用于数据解密，并且只能使用私钥进行解密。这将意味着可以安全的在程序中运送公钥。</p>
<p>优点：安全性高<br>缺点：一次只能加密非常小的数据文本（128个字节）</p>
<h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>混合模式结合了对称模式和非对称模式的优点，我们首先在服务端使用RSA生成公钥和私钥；在客户端使用AES生成密码（secret key），使用密码对敏感数据进行加密，得到敏感数据密文（encrypted text），接着依然在客户端获取服务端生成的公钥，对AES密码（secret key）进行加密，得到AES密钥密文（encrypted secret key），然后把敏感信息密文（encrypted text） 和 AES密钥密文（encrypted secret key）  传递给服务器；最后回到服务端，使用私钥对AES密钥密文（encrypted secret key）进行解密，得到密码（secret key），最后使用密码（secret key）对敏感信息密文（encrypted text）进行解密，得到敏感数据。</p>
<p>好吧，我知道有点绕，没关系，我总结了一下几点：</p>
<ol>
<li>服务端RSA生成【公钥】和【私钥】，私钥存储服务端。</li>
<li>客户端使用【AES密码】对【敏感数据】加密，得到【RSA敏感数据密文】</li>
<li>客户端使用【公钥】对【AES密码】进行加密，得到【AES密码密文】</li>
<li>服务端使用【私钥】对【AES密码密文】解密，得到【AES密码】</li>
<li>服务端使用【AES密码】对【RSA敏感数据密文】，得到【敏感数据】</li>
</ol>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>​    这样就有效的解决了客户端和服务端敏感数据传递存在的安全隐患，这不仅仅是一个解决方案，更应该是每个开发者遵循的一项责任。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对称加密方式（例如AES）&quot;&gt;&lt;a href=&quot;#对称加密方式（例如AES）&quot; class=&quot;headerlink&quot; title=&quot;对称加密方式（例如AES）&quot;&gt;&lt;/a&gt;对称加密方式（例如AES）&lt;/h3&gt;&lt;p&gt;对称加密方式通过密码（secret key）对敏感数
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab搭建记录</title>
    <link href="http://www.tipdev.xyz/2017/05/31/2017-05-31-GitLab%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.tipdev.xyz/2017/05/31/2017-05-31-GitLab搭建记录/</id>
    <published>2017-05-30T16:00:00.000Z</published>
    <updated>2017-10-12T02:58:12.520Z</updated>
    
    <content type="html"><![CDATA[<p>​    居然花了半天时间搭建GitLab服务器，记得之前用自带的git建过服务器，几个人开发还能撑的过来，但是像公司这样几十个人同时开发的场景，就难以管理了。so，今天试了下GitLab的搭建。</p>
<blockquote>
<p>以下搭建环境：环境Centos 7</p>
</blockquote>
<h3 id="第一步：安装Git"><a href="#第一步：安装Git" class="headerlink" title="第一步：安装Git"></a>第一步：安装Git</h3><p>​    首先检查是否已经安装git</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">git --version</div><div class="line">git version 2.11.0 (Apple Git-81)</div><div class="line"></div><div class="line"><span class="comment"># 如果未安装</span></div><div class="line">sudo yum install git</div></pre></td></tr></table></figure>
<h3 id="第二步：安装依赖包"><a href="#第二步：安装依赖包" class="headerlink" title="第二步：安装依赖包"></a>第二步：安装依赖包</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 安装依赖</span></div><div class="line">sudo yum install curl openssh-server openssh-clients postfix cronie</div><div class="line"><span class="comment"># 启动邮件服务</span></div><div class="line">sudo service postfix start</div><div class="line"><span class="comment"># 检查 postfix</span></div><div class="line">sudo chkconfig postfix on</div></pre></td></tr></table></figure>
<h3 id="第三步：安装GitLab"><a href="#第三步：安装GitLab" class="headerlink" title="第三步：安装GitLab"></a>第三步：安装GitLab</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 添加国内镜像，新建/etc/yum.repos.d/gitlab-ce.repo 文件</span></div><div class="line">[gitlab-ce]</div><div class="line">name=gitlab-ce</div><div class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6</div><div class="line">repo_gpgcheck=0</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div><div class="line">gpgkey=https://packages.gitlab.com/gpg.key</div><div class="line"></div><div class="line"><span class="comment"># 安装GitLab</span></div><div class="line">sudo yum install gitlab-ce</div><div class="line"><span class="comment"># 或</span></div><div class="line">sudo yum install gitlab-ce-8.5.7-ce.0.el6.x86_64(指定GitLab版本)</div><div class="line"><span class="comment"># 应用gitlab.rb配置</span></div><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<h3 id="第四部：配置"><a href="#第四部：配置" class="headerlink" title="第四部：配置"></a>第四部：配置</h3><p>修改 vim /etc/gitlab/gitlab.rb 文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 如果需要用域名访问，请在hosts文件中做映射</span></div><div class="line">external_url <span class="string">'http://localhost:8800'</span></div><div class="line"></div><div class="line"><span class="comment"># unicorn 默认端口为8080，如果被占用就会报错502</span></div><div class="line">unicorn[<span class="string">'listen'</span>] = <span class="string">'127.0.0.1'</span></div><div class="line">unicorn[<span class="string">'port'</span>] = 8801</div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 应用gitlab.rb配置</span></div><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>
<h3 id="第五步：汉化"><a href="#第五步：汉化" class="headerlink" title="第五步：汉化"></a>第五步：汉化</h3><ol>
<li><p>检查GitLab版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div></pre></td></tr></table></figure>
</li>
<li><p>克隆汉化包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://gitlab.com/larryli/gitlab.git</div></pre></td></tr></table></figure>
</li>
<li><p>比对汉化补丁</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 注意汉化补丁要和GitLab版本对应，否则无法正常工作</span></div><div class="line"><span class="built_in">cd</span> gitlab/</div><div class="line"><span class="comment"># 建议先切换到8-5-zh分支下git checkout 8-5-zh，再进行操作</span></div><div class="line">sudo git diff origin/8-5-stable  8-5-zh &gt; /tmp/8.5.diff</div></pre></td></tr></table></figure>
</li>
<li><p>应用汉化补丁</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 先停止GitLab</span></div><div class="line">sudo gitlab-ctl stop</div><div class="line"><span class="comment"># 应用汉化补丁</span></div><div class="line"><span class="built_in">cd</span> /opt/gitlab/embedded/service/gitlab-rails</div><div class="line">git apply /tmp/8.5.diff  </div><div class="line"><span class="comment"># 启动GitLab</span></div><div class="line">sudo gitlab-ctl reconfigure</div><div class="line">sudo gitlab-ctl start</div></pre></td></tr></table></figure>
</li>
</ol>
<p>默认管理员账号</p>
<blockquote>
<p>账号：root</p>
<p>密码： 5iveL!fe</p>
</blockquote>
<p>最后，在浏览器输入服务器ip地址，或者你做映射对应的域名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    居然花了半天时间搭建GitLab服务器，记得之前用自带的git建过服务器，几个人开发还能撑的过来，但是像公司这样几十个人同时开发的场景，就难以管理了。so，今天试了下GitLab的搭建。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下搭建环境：环境Centos 7&lt;
    
    </summary>
    
    
      <category term="GitLab" scheme="http://www.tipdev.xyz/tags/GitLab/"/>
    
      <category term="Git" scheme="http://www.tipdev.xyz/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Android玩转View（二）搞懂View的滑动原理</title>
    <link href="http://www.tipdev.xyz/2017/05/23/2017-05-23-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%BA%8C%EF%BC%89%E6%90%9E%E6%87%82View%E7%9A%84%E6%BB%91%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
    <id>http://www.tipdev.xyz/2017/05/23/2017-05-23-Android玩转View（二）搞懂View的滑动原理/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-05-23T16:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" target="_blank" rel="external">Android玩转View（一） 掌握View的基础知识</a><br><a href="http://tipdev.xyz/2017/05/23/2017-05-23-Android玩转View（二）搞懂View的滑动原理/" target="_blank" rel="external">Android玩转View（二） 搞懂View的滑动原理</a><br>Android玩转View（三） 搞懂View的弹性滑动<br>Android玩转View（四） 搞懂View的事件分发机制<br>Android玩转View（五） 搞懂View的工作原理（measure、layout和draw）<br>Android玩转View（六） Dome演示</p>
<h3 id="滑动原理"><a href="#滑动原理" class="headerlink" title="滑动原理"></a>滑动原理</h3><p>实质上是改变View的上下左右边距，或则给View增加动画，达到的平移过程。无论是多么绚丽的滑动，归根结底就是通过滑动再加上一些绚丽的特效组成的。</p>
<h3 id="滑动方式"><a href="#滑动方式" class="headerlink" title="滑动方式"></a>滑动方式</h3><ol>
<li><p>使用scrollTo/scrollBy<br>scrollBy内部实际上也是调用了scrollTo方法，他实现了基于当前View的相对滑动。<br>scrollTo实现了基于所传递参数的绝对滑动。<br>scrollTo/scrollBy只能改变View内容的位置而不能改变View在布局中的位置。</p>
<p>​</p>
</li>
<li><p>使用动画平移<br>使用动画来移动View，主要是操作View的translationX和translationY属性。</p>
<p>View动画：View 动画是对View的影响做操作，并不能真正的改变View 的位置参数，如果希望保存动画后的状态就需要将fillAfter设置true。<br>属性动画：属性动画不存在View动画的问题，但Android3.0一下不兼容。</p>
<p>​</p>
</li>
<li>LayoutParams改变布局参数<br>   改变LayoutParams里的margin值。比如向右平移100px，就设置marginLeft参数增加100px。向下平移100px，就设置marginTop参数增加100px。</li>
</ol>
<h3 id="滑动的区别"><a href="#滑动的区别" class="headerlink" title="滑动的区别"></a>滑动的区别</h3><ol>
<li>scrollTo/scrollBy<br>优点：专门用于View的滑动，实现方便，不影响内部元素的单击事件。适合对View内容的滑动。<br>缺点：只能滑动View的内容，不能滑动View本身。</li>
</ol>
<ol>
<li>动画<br>优点：操作简单，主要适用于没有交互的View和实现复杂的动画效果。<br>缺点：属性动画在Android3.0一下需要兼容库，不能改变View本身的属性。</li>
</ol>
<ol>
<li>改变布局参数<br>优点：适合有交互的View。<br>缺点：操作复杂</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%
    
    </summary>
    
    
      <category term="Android" scheme="http://www.tipdev.xyz/tags/Android/"/>
    
      <category term="View" scheme="http://www.tipdev.xyz/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android玩转View（一） 掌握View的基础知识</title>
    <link href="http://www.tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.tipdev.xyz/2017/05/22/2017-05-22-Android玩转View（一） 掌握View的基础知识/</id>
    <published>2017-05-21T16:00:00.000Z</published>
    <updated>2017-05-23T16:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" target="_blank" rel="external">Android玩转View（一） 掌握View的基础知识</a><br><a href="http://tipdev.xyz/2017/05/23/2017-05-23-Android玩转View（二）搞懂View的滑动原理/" target="_blank" rel="external">Android玩转View（二） 搞懂View的滑动原理</a><br>Android玩转View（三） 搞懂View的弹性滑动<br>Android玩转View（四） 搞懂View的事件分发机制<br>Android玩转View（五） 搞懂View的工作原理（measure、layout和draw）<br>Android玩转View（六） Dome演示</p>
<h3 id="什么是View"><a href="#什么是View" class="headerlink" title="什么是View"></a>什么是View</h3><p>   View是Android所有控件的基类，View是一种界面层的控件的抽象，它代表了一个控件。<br>   View可以是单个控件或者多个控件组成组成一个控件。 </p>
<h3 id="View的位置参数"><a href="#View的位置参数" class="headerlink" title="View的位置参数"></a>View的位置参数</h3><p>   View的位置由它的四个顶点坐标来决定，分别对应属性left、right、top、bottom<br><img src="http://wx4.sinaimg.cn/large/88b64bf6ly1ffukyg2697j211m0vqdij.jpg" alt="img"></p>
<ol>
<li><p>获取View的宽度和高度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">width = right - left</div><div class="line">height = bottom – top </div><div class="line">  </div><div class="line"> <span class="comment">// 获取方法</span></div><div class="line">right = getRight()</div><div class="line">left = getLeft()</div><div class="line">top = getTop()</div><div class="line">bottom =getBottom()</div></pre></td></tr></table></figure>
</li>
<li><p>其他</p>
<p>参数x，y，translationX，translationY，其中x、y表示View的左上角相对于父容器的坐标，translationX、translationY表示View左上角相对于父容器的偏移量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">x = left + translationX</div><div class="line">y = top +translationY</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h3 id="MotionEvent和TouchSlop"><a href="#MotionEvent和TouchSlop" class="headerlink" title="MotionEvent和TouchSlop"></a>MotionEvent和TouchSlop</h3><ol>
<li><p>MotionEvent</p>
<p>手指接触屏幕出发的一系列事件</p>
<ul>
<li>ACTION_DOWN          手指按下</li>
<li>ACTION_MOVE          手指移动</li>
<li>ACTION_UP            手指抬起</li>
</ul>
<p>获得点击事件的坐标点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">getX/getY              相对于当前View</div><div class="line">getRawX/getRawY        相对于手机屏幕</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>TouchSlop</p>
<p>系统能识别出来的最小滑动距离，意思就是滑动距离小于这个常量，系统就不认为你是在滑动。<br>获取最小滑动距离常量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">ViewConfiguration.get(getContext()).getScaledTouchSlop();</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h3 id="VelocityTracker、GestureDetector和Scroller"><a href="#VelocityTracker、GestureDetector和Scroller" class="headerlink" title="VelocityTracker、GestureDetector和Scroller"></a>VelocityTracker、GestureDetector和Scroller</h3><ol>
<li><p>Velocitytracker<br>速度追踪，用于计算手指滑动过程中的速度。<br>速度 = （终点位置 – 起点位置）／时间段</p>
</li>
<li><p>GestureDetector<br>手势检测，用于辅助检测用户的单机、滑动、长按、双击等行为。</p>
</li>
<li><p>Scroller<br>弹性滑动对象，用于实现View的弹性滑动。</p>
</li>
</ol>
<p>相关资料</p>
<ul>
<li><a href="http://item.jd.com/11760209.html" target="_blank" rel="external">Android 开发艺术探索</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://tipdev.xyz/2017/05/22/2017-05-22-Android%E7%8E%A9%E8%BD%ACView%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%8E%8C%E6%8F%A1View%E7%9A%
    
    </summary>
    
    
      <category term="Android" scheme="http://www.tipdev.xyz/tags/Android/"/>
    
      <category term="View" scheme="http://www.tipdev.xyz/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>View 的事件（一）事件分发机制</title>
    <link href="http://www.tipdev.xyz/2017/05/12/2017-05-12-View%20%E7%9A%84%E4%BA%8B%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.tipdev.xyz/2017/05/12/2017-05-12-View 的事件（一）事件分发机制/</id>
    <published>2017-05-11T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一下View的事件分发机制，这也算是View的一个核心知识点，经常在面试过程中被问到。同样在开发过程中自定义View、解决事件冲突等，都需要掌握View的事件分发机制。</p>
<h3 id="View事件分发过程"><a href="#View事件分发过程" class="headerlink" title="View事件分发过程"></a>View事件分发过程</h3><ul>
<li>事件分发  dispatchTouchEvent</li>
<li>事件拦截 onInterceptTouchEvent</li>
<li>处理事件 onTouchEvent</li>
</ul>
<h3 id="事件传递流程"><a href="#事件传递流程" class="headerlink" title="事件传递流程"></a>事件传递流程</h3><p><img src="http://wx2.sinaimg.cn/mw690/88b64bf6ly1ffizxniqf2j219y1giwiz.jpg" alt="未标题-1"><br>当ViiewGroup接收到事件的时候，首先它的dispatchTouchEvent方法被触发，接着到ViewGroup的onInterceptTouchEvent方法中，如果返回true，就说明ViewGroup要拦截消费该事件，传递到ViewGroup的onTouchEvent方法中；如果返回的是false，就说明ViewGroup不拦截该事件，这样就传递到子View的dispatchTouchEvent方法中。</p>
<p>上述三个方法的传递过程，用如下伪代码表示非常好理解：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">diapatchTouchEvent</span><span class="params">(MotionEvent ev)</span></span>&#123;</div><div class="line">  <span class="keyword">boolean</span> consume = <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">if</span>(onInterceptTouchEvent(ev))&#123;</div><div class="line">    consume = onTouchEvent(ev);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    consume = child.dispatchTouchEvent(ev);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> consume;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：</p>
<ol>
<li><p>dispatchTouchEvent的返回值取决于onTouchEvent方法和子view的dispatchTouchEvent方法。​</p>
<p>比如：onInterceptTouchEvent到达的是当前View的onTouchEvent方法的时候，onTouchEvent没有消费事件，那么当前View的dispatchTouchEvent方法返回的就是false；反之到达的是子 View的dispatchTouchEvent方法，返回false，那么上级View的dispatchTouchEvent方法返回的也是false。</p>
</li>
<li><p>当View 的onTouchEvent方法，返回的是false时，它的父类的onTouchEvent方法就会被触发，以此类推，如果最后都没有处理该事件的话，会回到Activity onTouchEvent方法中。</p>
<p>比如：老板和项目经理说我们要开发一个淘宝—经理和项目负责人说做个淘宝— 项目负责人和开发人员说搞个淘宝出来— 开发人员搞了半天没搞出来，报告项目负责人说，做不出来— 项目负责人和经理说做不了这个— 经理报告老板说整个我们真做不了—最后老板只好，哦…</p>
</li>
</ol>
<p>相关资料</p>
<ul>
<li><a href="http://item.jd.com/11760209.html" target="_blank" rel="external">Android 开发艺术探索</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍一下View的事件分发机制，这也算是View的一个核心知识点，经常在面试过程中被问到。同样在开发过程中自定义View、解决事件冲突等，都需要掌握View的事件分发机制。&lt;/p&gt;
&lt;h3 id=&quot;View事件分发过程&quot;&gt;&lt;a href=&quot;#View事件分发过程&quot; cl
    
    </summary>
    
    
      <category term="Android" scheme="http://www.tipdev.xyz/tags/Android/"/>
    
      <category term="View" scheme="http://www.tipdev.xyz/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Gradle 部署到Tomcat</title>
    <link href="http://www.tipdev.xyz/2017/04/18/2017-04-18-Spring%20Boot%20Gradle%20%E9%83%A8%E7%BD%B2%E5%88%B0Tomcat/"/>
    <id>http://www.tipdev.xyz/2017/04/18/2017-04-18-Spring Boot Gradle 部署到Tomcat/</id>
    <published>2017-04-17T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Spring Boot ，自己搭的小型项目服务端开发的差不多了，，准备部署项目到服务器上跑一下，发现网上都是一些关于Maven的方法，提及到Gradle的也都讲的不太清楚，记录一下自己的心得。</p>
<h4 id="一、配置Application"><a href="#一、配置Application" class="headerlink" title="一、配置Application"></a>一、配置Application</h4><p>首先修改程序入口Application 中，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WkServerApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// run with war</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> application.sources(WkServerApplication.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// run with jar</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		SpringApplication.run(WkServerApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承SpringBootServletInitializer，并且覆写configure方法。</p>
<h4 id="二、配置build-gradle"><a href="#二、配置build-gradle" class="headerlink" title="二、配置build.gradle"></a>二、配置build.gradle</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">apply plugin: <span class="string">'war'</span>      <span class="comment">// 添加war插件</span></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">'org.springframework.boot'</span>  <span class="comment">// spring boot 插件</span></div><div class="line"></div><div class="line"><span class="comment">// 设置war包的名字，由baseName+version组成</span></div><div class="line">war &#123;</div><div class="line">	baseName = <span class="string">'WK-SERVER'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">	compile(<span class="string">"org.springframework.boot:spring-boot-starter-web"</span>)</div><div class="line">      </div><div class="line">    <span class="comment">// 添加provide tomcat，因为spring boot集成了tomcat，为了确保不受servlet干扰</span></div><div class="line">	providedRuntime <span class="string">'org.springframework.boot:spring-boot-starter-tomcat'</span></div><div class="line">      ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="三、生成War包"><a href="#三、生成War包" class="headerlink" title="三、生成War包"></a>三、生成War包</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">./gradlew war   <span class="comment">// 在项目的根目录执行，生成文件路径 /build/libs/wk.war</span></div></pre></td></tr></table></figure>
<p>或者 在IDEA中 工具栏Build-Build artifacts</p>
<h4 id="四、部署到Tomcat"><a href="#四、部署到Tomcat" class="headerlink" title="四、部署到Tomcat"></a>四、部署到Tomcat</h4><p>这里Tomcat的安装就不说了，我们把生成的war包 复制到 tomcat/webapp/下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">./startup.sh</div></pre></td></tr></table></figure>
<p>注意：要在原来url端口号后加上war包名，就像 <a href="http://127.0.0.1:8080/wk/news" target="_blank" rel="external">http://127.0.0.1:8080/wk/news</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习Spring Boot ，自己搭的小型项目服务端开发的差不多了，，准备部署项目到服务器上跑一下，发现网上都是一些关于Maven的方法，提及到Gradle的也都讲的不太清楚，记录一下自己的心得。&lt;/p&gt;
&lt;h4 id=&quot;一、配置Application&quot;&gt;&lt;a hre
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://www.tipdev.xyz/tags/Spring-Boot/"/>
    
      <category term="Gradle" scheme="http://www.tipdev.xyz/tags/Gradle/"/>
    
      <category term="Tomcat" scheme="http://www.tipdev.xyz/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>JAVA错误 No default constructor for entity ...</title>
    <link href="http://www.tipdev.xyz/2017/04/17/2017-04-17-JAVA%E9%94%99%E8%AF%AF%20No%20default%20constructor%20for%20entity/"/>
    <id>http://www.tipdev.xyz/2017/04/17/2017-04-17-JAVA错误 No default constructor for entity/</id>
    <published>2017-04-16T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在使用JPA的时候，发现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">org.hibernate.InstantiationException: No default constructor for entity:  : com.cz1.domain.Image</div></pre></td></tr></table></figure>
<p>原因:缺少无参构造，Hibernate必须要使用Java反射机制来实例化对象。</p>
<p>解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Image</span><span class="params">()</span></span>&#123;&#125;   <span class="comment">// 加上无参构造</span></div></pre></td></tr></table></figure>
<p>解决了，记录一下！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在使用JPA的时候，发现以下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;org.hibernate.InstantiationExc
    
    </summary>
    
    
      <category term="Java" scheme="http://www.tipdev.xyz/tags/Java/"/>
    
      <category term="Hibernate" scheme="http://www.tipdev.xyz/tags/Hibernate/"/>
    
      <category term="JPA" scheme="http://www.tipdev.xyz/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>如何模拟json数据</title>
    <link href="http://www.tipdev.xyz/2017/03/01/2017-03-01-%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9Fjson%E6%95%B0%E6%8D%AE/"/>
    <id>http://www.tipdev.xyz/2017/03/01/2017-03-01-如何模拟json数据/</id>
    <published>2017-02-28T16:00:00.000Z</published>
    <updated>2017-11-07T03:37:00.273Z</updated>
    
    <content type="html"><![CDATA[<p>最近新项目，后台人手不够，招了一个星期，才招到人，但人再厉害也需要时间先去熟悉项目吧。这样我们移动端或者前端的就被牵着鼻子走，然后项目进度跟不上就甩锅给后端，“接口那边太慢，导致我这进度也受到影响”等等。</p>
<h3 id="一、Charles-拦截"><a href="#一、Charles-拦截" class="headerlink" title="一、Charles 拦截"></a>一、Charles 拦截</h3><ol>
<li><p>下载<a href="https://www.charlesproxy.com/download/" target="_blank" rel="external">Charles</a> </p>
</li>
<li><p>通过<a href="http://www.mocky.io" target="_blank" rel="external">mocky</a> 模拟json数据，最后会生成一个对应的url</p>
</li>
<li><p>设置Mac代理</p>
<p><img src="http://wx1.sinaimg.cn/mw690/88b64bf6gy1fd7kaaqtx3j215m0kk0zi.jpg" alt="img"></p>
</li>
</ol>
<p>   开启Mac 代理</p>
<p>   <img src="http://wx1.sinaimg.cn/mw690/88b64bf6gy1fd7kbrt2kkj215o0kktce.jpg" alt="img"></p>
<ol>
<li><p>安装证书</p>
<p><img src="http://wx1.sinaimg.cn/mw690/88b64bf6gy1fd7ked6xc0j215o0ib150.jpg" alt="img"></p>
<p>安装向导</p>
<p><img src="http://wx2.sinaimg.cn/mw690/88b64bf6gy1fd7kpj9rd4j215o0mfjvh.jpg" alt="img"></p>
</li>
</ol>
<p>​      接着就是手机安装证书</p>
<p>​          <img src="http://wx4.sinaimg.cn/mw690/88b64bf6gy1fd7lec3dgxj20a00hs3zw.jpg" alt="img"> <img src="http://wx4.sinaimg.cn/mw690/88b64bf6gy1fd7lecgozpj20a00hsmxv.jpg" alt="img"></p>
<p>​         最后设置拦截的url 到你模拟的mock url</p>
<p><img src="http://wx4.sinaimg.cn/mw690/88b64bf6gy1fd7lkgmx6gj215o0s47k7.jpg" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近新项目，后台人手不够，招了一个星期，才招到人，但人再厉害也需要时间先去熟悉项目吧。这样我们移动端或者前端的就被牵着鼻子走，然后项目进度跟不上就甩锅给后端，“接口那边太慢，导致我这进度也受到影响”等等。&lt;/p&gt;
&lt;h3 id=&quot;一、Charles-拦截&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="android" scheme="http://www.tipdev.xyz/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>进阶 git 多仓库管理开发（二）</title>
    <link href="http://www.tipdev.xyz/2017/02/12/2017-02-12-git%20%E5%A4%9A%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.tipdev.xyz/2017/02/12/2017-02-12-git 多仓库管理开发技巧（二）/</id>
    <published>2017-02-11T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>接着上次的<a href="http://tipdev.xyz/2017/02/10/2017-02-10-git%20%E5%A4%9A%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">多仓库管理开发(一)</a>，在很多情况下我们会涉及到不同的仓库使用不同的用户名和email，比如：在公司开发的时候一般都是使用自己真实名字和公司邮箱；在github时候一般不会暴露自己真实的姓名。这个时候多仓库设置不同用户名就非常有必要了。</p>
<p>在多说一遍，在每个git仓库下，都有一个.git/ 文件夹，使用vim或者其他工具，打开.git/config 文件，添加一下内容：</p>
<pre><code>[user]
    name = 用户名
    email = 邮箱地址
</code></pre><p>这样就解决问题了，当然你也可以使用命名行的形式指定用户名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git config user.name &quot;用户名&quot;</div><div class="line">git config user.email 邮件</div></pre></td></tr></table></figure>
<p>加上 <code>—global</code>  表示设置全局的，对所有的项目都有效，去掉 <code>—global</code> 表示针对某个特定的项目。</p>
<p><em>参考</em>  <a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="external">Git官方教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着上次的&lt;a href=&quot;http://tipdev.xyz/2017/02/10/2017-02-10-git%20%E5%A4%9A%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E5%BC%80%E5%8F%91%E6%8A%80%E5%B
    
    </summary>
    
    
      <category term="git" scheme="http://www.tipdev.xyz/tags/git/"/>
    
      <category term="github" scheme="http://www.tipdev.xyz/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>进阶 git 多仓库管理开发（一）</title>
    <link href="http://www.tipdev.xyz/2017/02/10/2017-02-10-git%20%E5%A4%9A%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.tipdev.xyz/2017/02/10/2017-02-10-git 多仓库管理开发技巧（一）/</id>
    <published>2017-02-09T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在项目中碰到一个问题，需要同时向两个仓库提交代码，然后又可以单独向某一个Git仓库提交/拉取代码。<br>其实非常的简单，在GitHub／GitLab上我们新建一个仓库后，可以看到以下提示信息：</p>
<blockquote>
<p>…or push an existing repository from the command line</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin git@github.com:xxx/Smart.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>这表示向这个本地库添加一个远程仓库，并且起名为origin，其实按照这个再添加一个其他的远程仓库，换个名字不就好了！</p>
<p>默认地址:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 查看远程仓库地址 git remote -v</span></div><div class="line">origin	git<span class="meta">@github</span>.com:xxx/Smart.git (fetch)</div><div class="line">origin	git<span class="meta">@github</span>.com:xxx/Smart.git (push)</div></pre></td></tr></table></figure>
<ol>
<li><p>添加smart远程仓库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">git remote add smart git@<span class="number">192.168</span>.11.111:Product/Smart.git  <span class="comment">// 推荐</span></div></pre></td></tr></table></figure>
<p>或者 每个仓库都有一个.git/config  使用open config 打开，添加一下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[remote &quot;名字&quot;]</div><div class="line">	url = git@192.168.11.111:Product/Smart.git</div><div class="line">	fetch = +refs/heads/*:refs/remotes/名字/*</div></pre></td></tr></table></figure>
</li>
<li><p>单仓库提交／拉取</p>
<p>默认</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull origin master</div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>以smart仓库 为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull smart master</div><div class="line">git push smart master</div></pre></td></tr></table></figure>
</li>
<li><p>多仓库提交／拉取</p>
<p>打开.git/config 添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[remote &quot;all&quot;] </div><div class="line">url = git@github.com:xxx/Smart.git</div><div class="line">url = git@192.168.11.111:Product/Smart.git</div></pre></td></tr></table></figure>
<p>这样就可以同时提交／拉取两个仓库了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git pull all master</div><div class="line">git push all master</div></pre></td></tr></table></figure>
<p>三个、四个…..以此类推就好了。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在项目中碰到一个问题，需要同时向两个仓库提交代码，然后又可以单独向某一个Git仓库提交/拉取代码。&lt;br&gt;其实非常的简单，在GitHub／GitLab上我们新建一个仓库后，可以看到以下提示信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…or push an exist
    
    </summary>
    
    
      <category term="git" scheme="http://www.tipdev.xyz/tags/git/"/>
    
      <category term="github" scheme="http://www.tipdev.xyz/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Android 命名规范</title>
    <link href="http://www.tipdev.xyz/2017/02/07/2017-02-07-Android%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>http://www.tipdev.xyz/2017/02/07/2017-02-07-Android命名规范/</id>
    <published>2017-02-06T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:43.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="说明：android开发中，常用的命名方式主要有大驼峰式（帕斯卡）、小驼峰式（驼峰）、下划线命名法。"><a href="#说明：android开发中，常用的命名方式主要有大驼峰式（帕斯卡）、小驼峰式（驼峰）、下划线命名法。" class="headerlink" title="说明：android开发中，常用的命名方式主要有大驼峰式（帕斯卡）、小驼峰式（驼峰）、下划线命名法。"></a><em>说明：android开发中，常用的命名方式主要有大驼峰式（帕斯卡）、小驼峰式（驼峰）、下划线命名法。</em></h5><ol>
<li>驼峰命名法:又称小驼峰命名法，除首单词外，其余所有单词的第一个字母大写。例如：<code>onCreate()</code></li>
<li>帕斯卡命名法:又称大驼峰命名法，所有单词的第一个字母大写。例如：<code>Foo()</code></li>
<li>下划线命名法:单词与单词间用下划线做间隔。例如：activity_main.xml</li>
</ol>
<h2 id="项目包名命名"><a href="#项目包名命名" class="headerlink" title="项目包名命名"></a>项目包名命名</h2><p>采用反向命名规则，全部使用小写字母，一级包名为顶级域名，二级包名为公司、部门或者个人名，三级包名为项目名。例如：xyz.tipdev.parking</p>
<h2 id="类命名"><a href="#类命名" class="headerlink" title="类命名"></a>类命名</h2><p>采用大驼峰式命名，首字母大写，尽量避免缩写。</p>
<p>例：</p>
<table>
<thead>
<tr>
<th>类</th>
<th>命名规则</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Activity</td>
<td>XXX功能+Activity</td>
<td>MainActivity</td>
</tr>
<tr>
<td>Service</td>
<td>XXX功能+Service</td>
<td>PollService</td>
</tr>
<tr>
<td>Fragment</td>
<td>XXX功能+Fragment</td>
<td>PayFragment</td>
</tr>
<tr>
<td>Adapter</td>
<td>XXX功能+Adapter</td>
<td>OrderAdapter</td>
</tr>
<tr>
<td>Utils</td>
<td>XXX功能+Utils</td>
<td>FileUtils</td>
</tr>
<tr>
<td>Bean</td>
<td>XXX功能+Bean</td>
<td>UserBean</td>
</tr>
<tr>
<td>共享基础类</td>
<td>以Base开头</td>
<td>BaseActivity/BaseFragment</td>
</tr>
</tbody>
</table>
<h2 id="接口命名"><a href="#接口命名" class="headerlink" title="接口命名"></a>接口命名</h2><p>采用大驼峰式，首字母大写。</p>
<p>例： interface OnClickListener;</p>
<h2 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h2><p>采用小驼峰式，首字母小写，方法名一般采用动词。</p>
<p>例：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>getXX()</td>
<td>获取</td>
</tr>
<tr>
<td>setXX()</td>
<td>设置</td>
</tr>
<tr>
<td>initXX()</td>
<td>初始化</td>
</tr>
<tr>
<td>updateXX()</td>
<td>更新数据</td>
</tr>
<tr>
<td>saveXX()</td>
<td>保存数据</td>
</tr>
<tr>
<td>clearXX()</td>
<td>清除数据</td>
</tr>
<tr>
<td>removeXX()</td>
<td>移除数据</td>
</tr>
<tr>
<td>addXX()</td>
<td>添加数据</td>
</tr>
<tr>
<td>isXX()</td>
<td>判断true/false</td>
</tr>
</tbody>
</table>
<h2 id="字段命名"><a href="#字段命名" class="headerlink" title="字段命名"></a>字段命名</h2><ol>
<li><p>非public的、非static的字段名以m开头。</p>
</li>
<li><p>static开头的字段名以s开头。</p>
</li>
<li><p>其他字段名以小写字母开头。</p>
</li>
<li><p>publicstatic final 字段 （常量） 全部用大写字母并使用下划线分割。</p>
</li>
</ol>
<h2 id="控件命名"><a href="#控件命名" class="headerlink" title="控件命名"></a>控件命名</h2><p>变量命名规则+iD名  </p>
<p>例： </p>
<table>
<thead>
<tr>
<th>控件</th>
<th>iD</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Button</td>
<td>btn_</td>
<td>btn_login</td>
</tr>
<tr>
<td>ImageButton</td>
<td>ibtn_</td>
<td>ibtn_login</td>
</tr>
<tr>
<td>TextView</td>
<td>tv_</td>
<td>tv_content</td>
</tr>
<tr>
<td>ImageView</td>
<td>iv_</td>
<td>iv_car</td>
</tr>
<tr>
<td>EditText</td>
<td>et_</td>
<td>et_name</td>
</tr>
<tr>
<td>GroupView</td>
<td>gv_</td>
<td>gv_way</td>
</tr>
<tr>
<td>RadioButton</td>
<td>rbtn_</td>
<td>rbtn_report</td>
</tr>
<tr>
<td>SeekBar</td>
<td>seek_</td>
<td>seek_dis</td>
</tr>
<tr>
<td>CheckBox</td>
<td>cb_</td>
<td>cb_msg</td>
</tr>
<tr>
<td>Spinner</td>
<td>spinner_</td>
<td>spinner_way</td>
</tr>
<tr>
<td>ToolBar</td>
<td>tb_</td>
<td>tb_toolbar</td>
</tr>
<tr>
<td>RecyclerView</td>
<td>rv_</td>
<td>rv_order</td>
</tr>
<tr>
<td>ListView</td>
<td>lv_</td>
<td>lv_order</td>
</tr>
<tr>
<td>LinearLayout</td>
<td>ll_</td>
<td>ll_main</td>
</tr>
<tr>
<td>RelativeLayout</td>
<td>rl_</td>
<td>rl_main</td>
</tr>
<tr>
<td>ScrollView</td>
<td>scroll_</td>
<td>scroll_main</td>
</tr>
<tr>
<td>SearchView</td>
<td>search_</td>
<td>search_address</td>
</tr>
</tbody>
</table>
<h2 id="资源文件命名"><a href="#资源文件命名" class="headerlink" title="资源文件命名"></a>资源文件命名</h2><h3 id="layout命名"><a href="#layout命名" class="headerlink" title="layout命名"></a>layout命名</h3><p>全部小写，采用下划线命名</p>
<table>
<thead>
<tr>
<th>命名规范</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>activity<em>{模块</em>}功能</td>
<td>Activity命名格式</td>
</tr>
<tr>
<td>fragment<em>{模块</em>}功能</td>
<td>Fragment命名格式</td>
</tr>
<tr>
<td>dialog<em>{模块</em>}功能</td>
<td>Dialog命名格式</td>
</tr>
<tr>
<td>item<em>list</em>{模块_}功能</td>
<td>RecyclerView/ListView命名格式</td>
</tr>
</tbody>
</table>
<h3 id="drawable命名"><a href="#drawable命名" class="headerlink" title="drawable命名"></a>drawable命名</h3><p>模式：前缀{<em>控件}{</em>范围}{_后缀}</p>
<table>
<thead>
<tr>
<th>Drawable</th>
<th>命名规范</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>图标</td>
<td>ic_</td>
<td>ic_wechat</td>
</tr>
<tr>
<td>背景</td>
<td>bg_</td>
<td>bg_banner</td>
</tr>
<tr>
<td>分割线</td>
<td>div_</td>
<td>div_redline</td>
</tr>
<tr>
<td>默认</td>
<td>def_</td>
<td>def_user</td>
</tr>
<tr>
<td>区分状态，默认</td>
<td>_normal</td>
<td>login_normal</td>
</tr>
<tr>
<td>区分状态，按下</td>
<td>_pressed</td>
<td>login_pressed</td>
</tr>
<tr>
<td>区分状态，选中</td>
<td>_selected</td>
<td>login_selected</td>
</tr>
<tr>
<td>区分状态，不可用</td>
<td>_disable</td>
<td>login_disable</td>
</tr>
</tbody>
</table>
<h3 id="动画命名"><a href="#动画命名" class="headerlink" title="动画命名"></a>动画命名</h3><table>
<thead>
<tr>
<th>命名规范</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>fade_in</td>
<td>淡入</td>
</tr>
<tr>
<td>fade_out</td>
<td>淡出</td>
</tr>
<tr>
<td>push_down_in</td>
<td>从下方推入</td>
</tr>
<tr>
<td>push_down_out</td>
<td>从下方推出</td>
</tr>
<tr>
<td>silde_in_from_top</td>
<td>从上滑动进入</td>
</tr>
<tr>
<td>zoom_enter</td>
<td>变形进入</td>
</tr>
<tr>
<td>Shrink_to_middle</td>
<td>中间缩小</td>
</tr>
</tbody>
</table>
<h3 id="strings-xml命名"><a href="#strings-xml命名" class="headerlink" title="strings.xml命名"></a>strings.xml命名</h3><table>
<thead>
<tr>
<th>命名规范</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>activity名<em>{范围</em>}逻辑名</td>
<td>login_username (LoginActivity)</td>
</tr>
<tr>
<td>fragment名<em>{范围</em>}逻辑名</td>
<td>order_tip (OrderFragment)</td>
</tr>
</tbody>
</table>
<h3 id="colors-xml命名"><a href="#colors-xml命名" class="headerlink" title="colors.xml命名"></a>colors.xml命名</h3><table>
<thead>
<tr>
<th>colors</th>
<th>命名规范</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>背景颜色</td>
<td>bg_</td>
<td>bg_red</td>
</tr>
<tr>
<td>文本颜色</td>
<td>text_</td>
<td>text_hint</td>
</tr>
<tr>
<td>分割线颜色</td>
<td>div_</td>
<td>div_black</td>
</tr>
<tr>
<td>区分状态，默认</td>
<td>_normal</td>
<td>login_normal</td>
</tr>
<tr>
<td>区分状态，按下</td>
<td>_pressed</td>
<td>login_pressed</td>
</tr>
<tr>
<td>区分状态，选中</td>
<td>_selected</td>
<td>login_selected</td>
</tr>
<tr>
<td>区分状态，不可用</td>
<td>_disable</td>
<td>login_disable</td>
</tr>
</tbody>
</table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>英文缩写规则：该单词有英文缩写的取英文缩写，无英文缩写取开头3-4个字母</p>
<p>例如：initialization() —— init()</p>
<p>限制代码行长度：每行代码不应该超过Android Studio 建议分割线。</p>
<p>使用标准大括号风格：大括号不单独占用一行。</p>
<p>临时注释：使用TODO来注释一些临时、短期、不完美代码（常用注释勿用）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;说明：android开发中，常用的命名方式主要有大驼峰式（帕斯卡）、小驼峰式（驼峰）、下划线命名法。&quot;&gt;&lt;a href=&quot;#说明：android开发中，常用的命名方式主要有大驼峰式（帕斯卡）、小驼峰式（驼峰）、下划线命名法。&quot; class=&quot;headerlink&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RxJava 2.x 基础使用</title>
    <link href="http://www.tipdev.xyz/2017/02/07/2017-02-07-RxJava%202.x%20%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.tipdev.xyz/2017/02/07/2017-02-07-RxJava 2.x 基础使用/</id>
    <published>2017-02-06T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:37.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="在开始之前，先说说-RxJava2-0-的变化，或者直接去看官方文档-What’s-different-in-2-0-。简单总结为以下几点。"><a href="#在开始之前，先说说-RxJava2-0-的变化，或者直接去看官方文档-What’s-different-in-2-0-。简单总结为以下几点。" class="headerlink" title="在开始之前，先说说 RxJava2.0 的变化，或者直接去看官方文档 What’s different in 2.0 。简单总结为以下几点。"></a><em>在开始之前，先说说 RxJava2.0 的变化，或者直接去看官方文档 <a href="https://github.com/ReactiveX/RxJava/wiki/What&#39;s-different-in-2.0" target="_blank" rel="external">What’s different in 2.0</a> 。简单总结为以下几点。</em></h5><ol>
<li>RxJava2.x 不再接受null</li>
<li>背压（backpressure） Observable 不支持背压  全新的Flowable 支持背压</li>
<li>新增onSubscribe(Disposable d) 回调 </li>
<li>Consumer、BiConsumer替代 Action1、Action2 等</li>
<li>调整from() 为 fromArray、fromIterable、fromFuture</li>
<li>Func1和Func2改为Function和BiFunction，Func3-9改为Function3-9</li>
<li>修改Single、Completable为Reactive-Streams风格</li>
<li>新增Maybe基本类…</li>
</ol>
<h3 id="Observable-和-Flowable"><a href="#Observable-和-Flowable" class="headerlink" title="Observable 和 Flowable"></a>Observable 和 Flowable</h3><ul>
<li>Observablle：不支持背压；</li>
<li>Flowable：RxJava2.x 新增，支持背压；</li>
</ul>
<p>那么问题来了什么是背压呢？</p>
<p>我们系统资源有限，很多情况下我们处理数据的速度跟不上发送数据的速度，导致占用很大的资源，以至于内存泄漏等。背压就是用来解决这样的情况的，背压是一种告诉所有发送数据的组件减缓它们发送数据的速度的方法。</p>
<h5 id="什么时候使用Observable"><a href="#什么时候使用Observable" class="headerlink" title="什么时候使用Observable"></a>什么时候使用Observable</h5><ul>
<li>不超过1000条数据流，并且不存在内存溢出。</li>
<li>GUI鼠标事件，如鼠标移动、触摸事件等，这种很少可以合理地背压</li>
<li>处理的式同步流而你的Java平台又不支持Java Stream</li>
</ul>
<h5 id="什么时候使用Flowable"><a href="#什么时候使用Flowable" class="headerlink" title="什么时候使用Flowable"></a>什么时候使用Flowable</h5><ul>
<li>处理1000+ 元素</li>
<li>文件读写</li>
<li>数据库操作</li>
<li>网络IO操作</li>
</ul>
<p>一个简单的例子使用Observable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">         <span class="comment">// ObservableEmitter ?  发射器，可以用来触发 onNext onError onComplete 事件</span></div><div class="line">         e.onNext(<span class="string">"A"</span>);</div><div class="line">         e.onNext(<span class="string">"B"</span>);</div><div class="line">         e.onNext(<span class="string">"C"</span>);</div><div class="line">         e.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io())</div><div class="line">  .observeOn(AndroidSchedulers.mainThread())</div><div class="line">  .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">                <span class="comment">// onSubscribe 是 RxJava 2.x 新增回调，一般用于取消订阅d.dispose()</span></div><div class="line">                <span class="comment">// Disposable 是 RxJava 1.x 中的 Subscription 改名  遵循Reactive-Streams规范</span></div><div class="line">                Log.d(TAG, <span class="string">"ObserableCreate onSubscribe: "</span> + d.isDisposed());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onNext: "</span> + s);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onError: "</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onComplete: "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>使用Flowable 是这样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// ObservableEmitter ?  发射器，可以用来触发 onNext onError onComplete 事件</span></div><div class="line">        e.onNext(<span class="string">"A"</span>);</div><div class="line">        e.onNext(<span class="string">"B"</span>);</div><div class="line">        e.onNext(<span class="string">"C"</span>);</div><div class="line">        e.onComplete();</div><div class="line">    &#125;</div><div class="line">&#125;, BackpressureStrategy.BUFFER)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">                <span class="comment">// 初始化操作  (初始化需要再request前面)</span></div><div class="line">                <span class="comment">// 调用request()方法，会立即触发onNext()方法</span></div><div class="line">                Log.d(TAG, <span class="string">"FlowableCreate onSubscribe: "</span>);</div><div class="line">                s.request(Long.MAX_VALUE);   <span class="comment">// 必须</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onNext: "</span> + s);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onError: "</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(TAG, <span class="string">"onComplete: "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="onSubscribe-Disposable-d"><a href="#onSubscribe-Disposable-d" class="headerlink" title="onSubscribe(Disposable d)"></a>onSubscribe(Disposable d)</h3><p>传递参数为Disposable ，Disposable相当于RxJava1.x中的Subscription,用于解除订阅。那为什么不像RxJava1.x中订阅时返回Disposable，而是选择回调出来呢。官方说是为了设计成Reactive-Streams架构。</p>
<h3 id="Consumer、BiConsumer等"><a href="#Consumer、BiConsumer等" class="headerlink" title="Consumer、BiConsumer等"></a>Consumer、BiConsumer等</h3><p>在2.x中使用Consumer来代替Action1，如果是两个参数，则用BiConsumer来代替Action2，而且在2.x中删除了Action3-9，如果是多个参数则用Custom代替ActionN。</p>
<h3 id="fromArray、fromIterable、fromFuture"><a href="#fromArray、fromIterable、fromFuture" class="headerlink" title="fromArray、fromIterable、fromFuture"></a>fromArray、fromIterable、fromFuture</h3><p>在1.x中可以使用from()来发送数据，但是因为在使用java8编译时，javac不能够区分功能接口类型，所以它在2.x中被拆分为：fromArray,fromIterable,fromFuture</p>
<h3 id="Function和BiFunction"><a href="#Function和BiFunction" class="headerlink" title="Function和BiFunction"></a>Function和BiFunction</h3><p>在2.x中将1.x的Func1和Func2改为Function和BiFunction，Func3-9改为Function3-9，多参数FuncN改为Function</p>
<h3 id="Single"><a href="#Single" class="headerlink" title="Single"></a>Single</h3><p>它可以发出单个的onSuccess 或者 onError ，重新设计为Reactive-Streams架构。</p>
<h3 id="Completable"><a href="#Completable" class="headerlink" title="Completable"></a>Completable</h3><p>Completable也被重新设计为Reactive-Streams架构，RxJava1.x的<code>CompletableSubscriber</code>改为<code>CompletableObserver</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CompletableObserver</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h3><p>它是Single 和 Completable 的结合体，它可以发射0个或1个通知或错误的信号。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;在开始之前，先说说-RxJava2-0-的变化，或者直接去看官方文档-What’s-different-in-2-0-。简单总结为以下几点。&quot;&gt;&lt;a href=&quot;#在开始之前，先说说-RxJava2-0-的变化，或者直接去看官方文档-What’s-differen
    
    </summary>
    
    
      <category term="RxJava2.x" scheme="http://www.tipdev.xyz/tags/RxJava2-x/"/>
    
  </entry>
  
  <entry>
    <title>Android 6.0 运行时权限（笔记）</title>
    <link href="http://www.tipdev.xyz/2017/01/23/2017-01-23-Android%206.0%20%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://www.tipdev.xyz/2017/01/23/2017-01-23-Android 6.0 运行时权限（笔记）/</id>
    <published>2017-01-22T16:00:00.000Z</published>
    <updated>2017-05-23T16:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>记得上次看了郭神的6.0权限封装直播后，最近正好打算整理下项目代码，挺适合现在的项目的，一并记录下。</p>
<h4 id="申请权限流程"><a href="#申请权限流程" class="headerlink" title="申请权限流程"></a>申请权限流程</h4><p>1.在AndroidManifest文件中添加需要的权限</p>
<p>2.检查权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 判断某个权限是否已经授权 </span></div><div class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.READ_CONTACTS)</div><div class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">    <span class="comment">// 未授权</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 授权</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.申请权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 申请权限</span></div><div class="line">ActivityCompat.requestPermissions(<span class="keyword">this</span>,<span class="keyword">new</span> String[]&#123;</div><div class="line">        Manifest.permission.READ_CONTACTS&#125;, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>4.处理权限申请回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 申请权限回调</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> requestCode</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> permissions</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> grantResults</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="权限封装"><a href="#权限封装" class="headerlink" title="权限封装"></a>权限封装</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_REQUESTCODE  = <span class="number">1</span>;</div><div class="line"></div><div class="line">    PermissionListener permissionListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> AppComponent <span class="title">getAppComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((App) getApplication()).getAppComponent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 1.申请权限</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> permissions  权限</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> listener     回调接口</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">requestRunTimePermission</span><span class="params">(String[] permissions, PermissionListener listener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.permissionListener = listener;</div><div class="line"></div><div class="line">        List&lt;String&gt; permissionList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">// 遍历检查所有权限</span></div><div class="line">        <span class="keyword">for</span> (String permission : permissions) &#123;</div><div class="line">            <span class="comment">// 判断是否已经获得权限</span></div><div class="line">            <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, permission) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                <span class="comment">// 添加到待获取权限列表</span></div><div class="line">                permissionList.add(permission);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 判断待获取的权限列表是否未空</span></div><div class="line">        <span class="keyword">if</span> (!permissionList.isEmpty()) &#123;</div><div class="line">            <span class="comment">// 授权</span></div><div class="line">            ActivityCompat.requestPermissions(<span class="keyword">this</span>, permissionList.toArray(</div><div class="line">                    <span class="keyword">new</span> String[permissionList.size()]), PERMISSION_REQUESTCODE);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 已经全部获得权限</span></div><div class="line">            listener.Granted();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 2.申请权限回调</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> requestCode</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> permissions</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> grantResults</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">        <span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">            <span class="keyword">case</span> PERMISSION_REQUESTCODE:</div><div class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// 授权成功列表</span></div><div class="line">                    List&lt;String&gt; grantPermission = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    <span class="comment">// 授权失败列表</span></div><div class="line">                    List&lt;String&gt; deinePermission = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; permissions.length; i++) &#123;</div><div class="line">                        <span class="keyword">int</span> grantResult = grantResults[i];</div><div class="line">                        <span class="comment">// 判断权限授权情况</span></div><div class="line">                        <span class="keyword">if</span> (grantResult != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                            <span class="comment">// 授权失败权限</span></div><div class="line">                            String permission = permissions[i];</div><div class="line">                            deinePermission.add(permission);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="comment">// 授权成功权限</span></div><div class="line">                            String permission = permissions[i];</div><div class="line">                            grantPermission.add(permission);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// 判断授权失败列表 是否为空</span></div><div class="line">                    <span class="keyword">if</span> (deinePermission.isEmpty()) &#123;</div><div class="line">                        permissionListener.Granted();</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        permissionListener.onDenierPermission(deinePermission);</div><div class="line">                        permissionListener.onGranterPermission(grantPermission);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">final</span> String[] permissions = &#123;</div><div class="line">        Manifest.permission.ACCESS_COARSE_LOCATION,</div><div class="line">        Manifest.permission.READ_CONTACTS</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">    requestRunTimePermission(permissions, <span class="keyword">new</span> PermissionListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Granted</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 已经成功获得权限</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGranterPermission</span><span class="params">(List&lt;String&gt; permission)</span> </span>&#123;</div><div class="line">            <span class="comment">// 授权成功回调</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDenierPermission</span><span class="params">(List&lt;String&gt; permission)</span> </span>&#123;</div><div class="line">            <span class="comment">// 授权失败回调</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    initView();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>注：参考郭霖CSDN直播android 6.0 运行时权限</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得上次看了郭神的6.0权限封装直播后，最近正好打算整理下项目代码，挺适合现在的项目的，一并记录下。&lt;/p&gt;
&lt;h4 id=&quot;申请权限流程&quot;&gt;&lt;a href=&quot;#申请权限流程&quot; class=&quot;headerlink&quot; title=&quot;申请权限流程&quot;&gt;&lt;/a&gt;申请权限流程&lt;/h4
    
    </summary>
    
    
      <category term="android 6.0" scheme="http://www.tipdev.xyz/tags/android-6-0/"/>
    
      <category term="permission" scheme="http://www.tipdev.xyz/tags/permission/"/>
    
  </entry>
  
  <entry>
    <title>搭建git服务器</title>
    <link href="http://www.tipdev.xyz/2016/11/12/2016-11-12-%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8(%E8%AE%B0%E5%BD%95)/"/>
    <id>http://www.tipdev.xyz/2016/11/12/2016-11-12-搭建git服务器(记录)/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2016-11-12T12:18:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>1.一台电脑／VPS<br>2.安装linux（我用的ubuntu12.04）</p>
<p>大学里用剩下来的电脑闲置很久了，之所以闲置是因为配置太落后了，不想碰2333。于是想想太浪费了，就打算装个ubuntu搭个git服务器，备份下自己的一些项目代码。早上醒来粗略的查了下资料，在ubuntu的基础上搭建还是很方便的。好吧，go on</p>
<p>1.安装git</p>
<pre><code>sudo apt-get install git
</code></pre><p>2.创建git用户adduser（删除用户userdel）</p>
<pre><code>sudo adduser wkgit
</code></pre><p>3.把客户端公钥id_rsa.pub  导入 wkgit/.ssh/authorized_keys  文件中</p>
<pre><code>cat id_rsa.pub &gt;&gt; authorized_keys
</code></pre><p>4.初始化一个仓库，修改owner为git</p>
<pre><code>sudo git init --bare test.git
sudo chown -R wkgit:wkgit test.git
</code></pre><p>5.禁用shell登录（一把都会禁用，出于安全）</p>
<p>修改/etc/passwd文件中的</p>
<pre><code>wkgit:x:1002:1002:wkchen,,,,:/home/wkgit:/bin/bash
</code></pre><p>改为</p>
<pre><code>wkgit:x:1002:1002:wkchen,,,,:/home/wkgit:/usr/bin/git-shell
</code></pre><p>6.接着在客户机上试试git clone 等一系列操作吧！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h4&gt;&lt;p&gt;1.一台电脑／VPS&lt;br&gt;2.安装linux（我用的ubuntu12.04）&lt;/p&gt;
&lt;p&gt;大学里用剩下来的电脑闲置很久了，之所以闲置是因
    
    </summary>
    
    
      <category term="git" scheme="http://www.tipdev.xyz/tags/git/"/>
    
      <category term="ubuntu" scheme="http://www.tipdev.xyz/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>RecycleView使用之仿多次单击误触</title>
    <link href="http://www.tipdev.xyz/2016/07/18/2016-07-18-RecycleView%E4%BD%BF%E7%94%A8%E4%B9%8B%E4%BB%BF%E5%A4%9A%E6%AC%A1%E5%8D%95%E5%87%BB%E8%AF%AF%E8%A7%A6(%E8%AE%B0%E5%BD%95)/"/>
    <id>http://www.tipdev.xyz/2016/07/18/2016-07-18-RecycleView使用之仿多次单击误触(记录)/</id>
    <published>2016-07-17T16:00:00.000Z</published>
    <updated>2016-07-17T17:02:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一周在项目中碰到一些关于RecycleView点击事件的Bug。先说说上周，和同事代码合并，碰到了不少问题，之前没有这样的经历，这次合并代码，让我学到了很多，一方面学习了更多的git使用经验，另一方面让我学到了代码的合并过程。扯多了，来说说正题吧：Vecycleview Item点击事件的误操作，脑残操作，多次点击同一个item会打开多个activity。</p>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>通过判断当前点击事件触发的间隔，来作出判断是否误触发两次单击事件，打开两个页面。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>创建工具类</p>
<pre><code>public class NoDoubleClickUtils {
    private static long lastClickTime;
    private final static int SPACE_TIME = 500;

    public static void initLastClickTime() {
        lastClickTime = 0;
    }

    public synchronized static boolean isDoubleClick() {
        long currentTime = System.currentTimeMillis();
        boolean isClick2;
        if (currentTime - lastClickTime &gt;
                SPACE_TIME) {
            isClick2 = false;
        } else {
            isClick2 = true;
        }
        lastClickTime = currentTime;
        return isClick2;
    }
}
</code></pre><p>在单击事件里判断 NoDoubleClickUtils.isDoubleClick()的值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一周在项目中碰到一些关于RecycleView点击事件的Bug。先说说上周，和同事代码合并，碰到了不少问题，之前没有这样的经历，这次合并代码，让我学到了很多，一方面学习了更多的git使用经验，另一方面让我学到了代码的合并过程。扯多了，来说说正题吧：Vecycleview 
    
    </summary>
    
    
      <category term="recycleview" scheme="http://www.tipdev.xyz/tags/recycleview/"/>
    
      <category term="android" scheme="http://www.tipdev.xyz/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>关于自定义Toolbar左边出现16dp的空白间隙(记录)</title>
    <link href="http://www.tipdev.xyz/2016/07/05/2016-07-05-%E5%85%B3%E4%BA%8E%E8%87%AA%E5%AE%9A%E4%B9%89Toolbar%E5%B7%A6%E8%BE%B9%E5%87%BA%E7%8E%B0%E7%A9%BA%E7%99%BD%E9%97%B4%E9%9A%99(%E8%AE%B0%E5%BD%95)/"/>
    <id>http://www.tipdev.xyz/2016/07/05/2016-07-05-关于自定义Toolbar左边出现空白间隙(记录)/</id>
    <published>2016-07-04T16:00:00.000Z</published>
    <updated>2017-05-23T16:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在给app自定义Toolbar的时候，发现左边出现空白间隔，反复查看布局也未发现问题，google查找相关资料，发现有不少朋友遇到这个问题，查看源码后发现问题出在contentInsetStart上，从字面上可以理解为从16dp处开始，导致现在空白间隙的问题。做下笔记，记录一下。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre><code>&lt;style name=&quot;Widget.Toolbar&quot;&gt;
    &lt;item name=&quot;titleTextAppearance&quot;&gt;@style/TextAppearance.Widget.Toolbar.Title&lt;/item&gt;
    &lt;item name=&quot;subtitleTextAppearance&quot;&gt;@style/TextAppearance.Widget.Toolbar.Subtitle&lt;/item&gt;
    &lt;item name=&quot;minHeight&quot;&gt;?attr/actionBarSize&lt;/item&gt;
    &lt;item name=&quot;titleMargins&quot;&gt;4dp&lt;/item&gt;
    &lt;item name=&quot;maxButtonHeight&quot;&gt;56dp&lt;/item&gt;
    &lt;item name=&quot;buttonGravity&quot;&gt;top&lt;/item&gt;
    &lt;item name=&quot;navigationButtonStyle&quot;&gt;@style/Widget.Toolbar.Button.Navigation&lt;/item&gt;
    &lt;item name=&quot;collapseIcon&quot;&gt;?attr/homeAsUpIndicator&lt;/item&gt;
    &lt;item name=&quot;collapseContentDescription&quot;&gt;@string/toolbar_collapse_description&lt;/item&gt;
    &lt;item name=&quot;contentInsetStart&quot;&gt;16dp&lt;/item&gt;
    &lt;item name=&quot;touchscreenBlocksFocus&quot;&gt;true&lt;/item&gt;
&lt;/style&gt;
</code></pre><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>在style.xml文件中添加如下代码：</p>
<pre><code>&lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;
    &lt;item name=&quot;toolbarStyle&quot;&gt;@style/ClubToolbar&lt;/item&gt;     
&lt;/style&gt;
</code></pre><hr>
<pre><code>&lt;style name=&quot;ClubToolbar&quot; parent=&quot;Widget.AppCompat.Toolbar&quot;&gt;
    &lt;item name=&quot;contentInsetStart&quot;&gt;0dp&lt;/item&gt;&lt;!--设置该属性解决空白部分--&gt;
&lt;/style&gt;
</code></pre><p>参考资料 <a href="http://my.oschina.net/yaly/blog/502471" target="_blank" rel="external">http://my.oschina.net/yaly/blog/502471</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在给app自定义Toolbar的时候，发现左边出现空白间隔，反复查看布局也未发现问题，google查找相关资料，发现有不少朋友遇到这个问题，查看源码后发现问题出在contentInsetStart上，从字面上可以理解为从16dp处开始，导致现在空白间隙的问题。做下笔记，
    
    </summary>
    
    
      <category term="android" scheme="http://www.tipdev.xyz/tags/android/"/>
    
      <category term="toolbar" scheme="http://www.tipdev.xyz/tags/toolbar/"/>
    
  </entry>
  
</feed>
